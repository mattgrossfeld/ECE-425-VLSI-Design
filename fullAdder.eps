%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
0 1589 6347 3010 clwin
0 1589 6348 3010 clwin
0 1589 6348 3010 clwin
ssls
1000 0 0 slc
1000 0 0 sfc
13 0 3933 2187 dls
0 -66 3940 2187 dls
13 0 3933 2121 dls
3965 2171 dlt
0 4 dlv
3 6 dlv
3 3 dlv
6 3 dlv
13 0 dlv
6 -3 dlv
3 -3 dlv
3 -6 dlv
0 -7 dlv
-3 -6 dlv
-6 -9 dlv
-32 -32 dlv
44 0 dlv
dle
13 0 2025 2648 dls
0 -66 2032 2648 dls
13 0 2025 2582 dls
2063 2635 dlt
6 3 dlv
10 10 dlv
0 -66 dlv
dle
0 800 400 slc
0 800 400 sfc
-263 0 4190 1891 dls
263 0 2414 1891 dls
-263 0 4190 2023 dls
263 0 2414 2023 dls
394 1250 2677 1760 dbu
-263 0 2282 2352 dls
263 0 506 2352 dls
-263 0 2282 2483 dls
263 0 506 2483 dls
395 1250 769 2220 dbu
-395 0 4585 2549 dls
-395 0 4585 2812 dls
0 395 4585 2483 dls
296 0 4585 2878 dls
-296 0 4881 2483 dls
4881 2680 197 197 -90 90 dau
5111 2680 33 32 delu
-362 0 5506 2681 dls
0 800 400 slc
0 800 400 sfc
0 -66 3081 1990 dls
3081 1955 dlt
9 10 dlv
7 3 dlv
9 0 dlv
6 -3 dlv
3 -10 dlv
0 -31 dlv
dle
0 -44 3175 1968 dls
3175 1958 dlt
-6 7 dlv
-7 3 dlv
-9 0 dlv
-6 -3 dlv
-6 -7 dlv
-4 -9 dlv
0 -6 dlv
4 -10 dlv
6 -6 dlv
6 -3 dlv
9 0 dlv
7 3 dlv
6 6 dlv
dle
0 -66 3200 1990 dls
3244 1990 dlt
-6 0 dlv
-7 -3 dlv
-3 -10 dlv
0 -53 dlv
dle
22 0 3219 1968 dls
3253 1924 dlt
25 66 dlv
25 -66 dlv
dle
31 0 3263 1946 dls
0 -66 3357 1990 dls
3357 1958 dlt
-7 7 dlv
-6 3 dlv
-9 0 dlv
-7 -3 dlv
-6 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
7 6 dlv
dle
0 -66 3416 1990 dls
3416 1958 dlt
-6 7 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
3438 1949 dlt
38 0 dlv
0 6 dlv
-3 7 dlv
-4 3 dlv
-6 3 dlv
-9 0 dlv
-6 -3 dlv
-7 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
7 -6 dlv
6 -3 dlv
9 0 dlv
6 3 dlv
7 6 dlv
dle
0 -44 3498 1968 dls
3498 1949 dlt
3 9 dlv
6 7 dlv
6 3 dlv
10 0 dlv
dle
0 -65 1173 2450 dls
1173 2416 dlt
10 9 dlv
6 3 dlv
9 0 dlv
6 -3 dlv
4 -9 dlv
0 -31 dlv
dle
0 -43 1267 2428 dls
1267 2419 dlt
-6 6 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -7 dlv
3 -9 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
0 -65 1292 2450 dls
1336 2450 dlt
-6 0 dlv
-6 -3 dlv
-4 -9 dlv
0 -53 dlv
dle
22 0 1311 2428 dls
1345 2385 dlt
26 65 dlv
25 -65 dlv
dle
31 0 1355 2406 dls
0 -65 1449 2450 dls
1449 2419 dlt
-6 6 dlv
-7 3 dlv
-9 0 dlv
-6 -3 dlv
-7 -6 dlv
-3 -9 dlv
0 -7 dlv
3 -9 dlv
7 -6 dlv
6 -3 dlv
9 0 dlv
7 3 dlv
6 6 dlv
dle
0 -65 1508 2450 dls
1508 2419 dlt
-6 6 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -7 dlv
3 -9 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
1530 2410 dlt
38 0 dlv
0 6 dlv
-3 6 dlv
-3 3 dlv
-7 3 dlv
-9 0 dlv
-6 -3 dlv
-7 -6 dlv
-3 -9 dlv
0 -7 dlv
3 -9 dlv
7 -6 dlv
6 -3 dlv
9 0 dlv
7 3 dlv
6 6 dlv
dle
0 -43 1590 2428 dls
1590 2410 dlt
3 9 dlv
6 6 dlv
6 3 dlv
10 0 dlv
dle
224 749 1000 slc
224 749 1000 sfc
132 0 374 2154 dls
132 0 374 2549 dls
0 198 506 2154 dls
0 66 506 2483 dls
658 0 374 1760 dls
0 131 1032 1760 dls
66 0 2282 2352 dls
0 329 2348 2023 dls
1382 0 1032 1891 dls
66 0 2348 2023 dls
658 0 2282 2483 dls
0 329 2940 2483 dls
1250 0 2940 2812 dls
0 526 4190 2023 dls
1184 0 4190 1891 dls
0 329 5374 1891 dls
131 0 5506 2681 dls
0 263 5637 2681 dls
527 0 5374 2220 dls
329 0 5637 2944 dls
1000 0 0 slc
1000 0 0 sfc
158 1772 dlt
-6 6 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -7 dlv
3 -9 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
0 -66 124 2187 dls
124 2156 dlt
6 6 dlv
6 3 dlv
10 0 dlv
6 -3 dlv
6 -6 dlv
3 -10 dlv
0 -6 dlv
-3 -9 dlv
-6 -6 dlv
-6 -4 dlv
-10 0 dlv
-6 4 dlv
-6 6 dlv
dle
6109 2233 dlt
-3 6 dlv
-10 3 dlv
-9 0 dlv
-9 -3 dlv
-4 -6 dlv
4 -7 dlv
6 -3 dlv
16 -3 dlv
6 -3 dlv
3 -6 dlv
0 -3 dlv
-3 -7 dlv
-10 -3 dlv
-9 0 dlv
-9 3 dlv
-4 7 dlv
dle
0 -44 158 2571 dls
158 2562 dlt
-6 6 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -10 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
6112 2945 dlt
-6 7 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -7 dlv
-4 -9 dlv
0 -6 dlv
4 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
50 0 6125 2905 dls
6209 2955 dlt
-6 -3 dlv
-6 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
3 10 dlv
0 6 dlv
-3 9 dlv
-6 7 dlv
-6 3 dlv
-10 0 dlv
dle
6256 2955 dlt
0 -32 dlv
3 -9 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
10 9 dlv
dle
0 -44 6291 2955 dls
6319 2977 dlt
0 -54 dlv
3 -9 dlv
6 -3 dlv
6 0 dlv
dle
22 0 6309 2955 dls
3721 1904 dlt
-3 6 dlv
-10 3 dlv
-9 0 dlv
-9 -3 dlv
-4 -6 dlv
4 -7 dlv
6 -3 dlv
15 -3 dlv
7 -3 dlv
3 -6 dlv
0 -3 dlv
-3 -7 dlv
-10 -3 dlv
-9 0 dlv
-9 3 dlv
-4 7 dlv
dle
3743 1913 dlt
0 -31 dlv
3 -10 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
9 10 dlv
dle
0 -44 3777 1913 dls
0 -44 3802 1913 dls
3802 1901 dlt
10 9 dlv
6 3 dlv
9 0 dlv
7 -3 dlv
3 -9 dlv
0 -32 dlv
dle
3837 1901 dlt
9 9 dlv
6 3 dlv
10 0 dlv
6 -3 dlv
3 -9 dlv
0 -32 dlv
dle
0 -66 2729 1924 dls
2729 1893 dlt
6 6 dlv
7 3 dlv
9 0 dlv
6 -3 dlv
6 -6 dlv
4 -10 dlv
0 -6 dlv
-4 -9 dlv
-6 -7 dlv
-6 -3 dlv
-9 0 dlv
-7 3 dlv
-6 7 dlv
dle
3678 2035 dlt
-6 6 dlv
-7 4 dlv
-9 0 dlv
-6 -4 dlv
-7 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
7 -6 dlv
6 -3 dlv
9 0 dlv
7 3 dlv
6 6 dlv
dle
0 -44 3734 2045 dls
3734 2035 dlt
-6 6 dlv
-6 4 dlv
-10 0 dlv
-6 -4 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
0 -44 3759 2045 dls
3759 2026 dlt
4 9 dlv
6 6 dlv
6 4 dlv
9 0 dlv
dle
0 -44 3800 2045 dls
3800 2026 dlt
3 9 dlv
7 6 dlv
6 4 dlv
9 0 dlv
dle
18 -44 3835 2045 dls
3872 2045 dlt
-19 -44 dlv
-6 -13 dlv
-6 -6 dlv
-6 -3 dlv
-4 0 dlv
dle
0 -44 2763 2045 dls
2763 2035 dlt
-6 6 dlv
-6 4 dlv
-9 0 dlv
-7 -4 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
6 6 dlv
dle
1813 2364 dlt
-3 6 dlv
-10 4 dlv
-9 0 dlv
-9 -4 dlv
-3 -6 dlv
3 -6 dlv
6 -3 dlv
16 -3 dlv
6 -4 dlv
3 -6 dlv
0 -3 dlv
-3 -6 dlv
-10 -3 dlv
-9 0 dlv
-9 3 dlv
-3 6 dlv
dle
1835 2374 dlt
0 -32 dlv
3 -9 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
9 9 dlv
dle
0 -44 1869 2374 dls
0 -44 1894 2374 dls
1894 2361 dlt
10 9 dlv
6 4 dlv
10 0 dlv
6 -4 dlv
3 -9 dlv
0 -31 dlv
dle
1929 2361 dlt
9 9 dlv
7 4 dlv
9 0 dlv
6 -4 dlv
3 -9 dlv
0 -31 dlv
dle
0 -66 821 2385 dls
821 2353 dlt
6 6 dlv
7 4 dlv
9 0 dlv
6 -4 dlv
7 -6 dlv
3 -9 dlv
0 -6 dlv
-3 -10 dlv
-7 -6 dlv
-6 -3 dlv
-9 0 dlv
-7 3 dlv
-6 6 dlv
dle
1770 2496 dlt
-6 6 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -10 dlv
0 -6 dlv
3 -9 dlv
6 -7 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 7 dlv
dle
0 -44 1827 2505 dls
1827 2496 dlt
-7 6 dlv
-6 3 dlv
-9 0 dlv
-7 -3 dlv
-6 -6 dlv
-3 -10 dlv
0 -6 dlv
3 -9 dlv
6 -7 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
7 7 dlv
dle
0 -44 1852 2505 dls
1852 2486 dlt
3 10 dlv
6 6 dlv
6 3 dlv
10 0 dlv
dle
0 -44 1892 2505 dls
1892 2486 dlt
3 10 dlv
7 6 dlv
6 3 dlv
9 0 dlv
dle
19 -44 1927 2505 dls
1964 2505 dlt
-18 -44 dlv
-7 -12 dlv
-6 -7 dlv
-6 -3 dlv
-3 0 dlv
dle
0 -44 856 2505 dls
856 2496 dlt
-7 6 dlv
-6 3 dlv
-9 0 dlv
-7 -3 dlv
-6 -6 dlv
-3 -10 dlv
0 -6 dlv
3 -9 dlv
6 -7 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
7 7 dlv
dle
0 -44 4500 2889 dls
4500 2879 dlt
-6 7 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
0 -66 4466 2648 dls
4466 2616 dlt
6 7 dlv
6 3 dlv
10 0 dlv
6 -3 dlv
6 -7 dlv
3 -9 dlv
0 -6 dlv
-3 -10 dlv
-6 -6 dlv
-6 -3 dlv
-10 0 dlv
-6 3 dlv
-6 6 dlv
dle
19 -44 5249 2757 dls
5287 2757 dlt
-19 -44 dlv
-6 -12 dlv
-7 -6 dlv
-6 -3 dlv
-3 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
243 1700 dpb
243 1819 dpv
315 1819 dpv
374 1760 dpv
315 1700 dpv
dps
2388 1996 2440 2049 dbs
2388 1865 2440 1917 dbs
4164 1996 4216 2049 dbs
4164 1865 4216 1917 dbs
243 2095 dpb
243 2213 dpv
315 2213 dpv
374 2154 dpv
315 2095 dpv
dps
5901 2161 dpb
5901 2279 dpv
5973 2279 dpv
6032 2220 dpv
5973 2161 dpv
dps
243 2490 dpb
243 2608 dpv
315 2608 dpv
374 2549 dpv
315 2490 dpv
dps
480 2457 532 2510 dbs
480 2325 532 2378 dbs
2256 2457 2309 2510 dbs
2256 2325 2309 2378 dbs
4164 2786 4216 2838 dbs
4164 2523 4216 2575 dbs
5480 2654 5532 2707 dbs
5901 2885 dpb
5901 3003 dpv
5973 3003 dpv
6032 2944 dpv
5973 2885 dpv
dps
0 1589 6349 3010 clwin
gfs
%%Trailer
%%EOF
