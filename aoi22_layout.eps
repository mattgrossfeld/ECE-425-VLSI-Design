%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
1 0 4598 6348 clwin
1 0 4597 6348 clwin
1 0 4597 6349 clwin
1 fds
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 fde
1 sfp
0 800 400 slc
0 800 400 sfc
ssls
752 5447 1653 6348 dbf
901 901 752 5447 dbu
1 3643 4321 5447 dbf
1804 4320 1 3643 dbu
2 fds
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 fde
2 sfp
0 800 400 slc
0 800 400 sfc
1052 5747 1353 6048 dbf
301 301 1052 5747 dbu
451 1089 3870 1540 dbf
451 3419 451 1089 dbu
1000 502 0 slc
1000 502 0 sfc
1954 150 2254 450 dbf
300 300 1954 150 dbu
451 4094 3870 4996 dbf
902 3419 451 4094 dbu
0 800 400 slc
0 800 400 sfc
601 601 902 5597 dbu
827 3719 301 901 dbu
1000 502 0 slc
1000 502 0 sfc
601 601 1804 0 dbu
1278 3719 301 3906 dbu
3 fds
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 fde
3 sfp
1000 0 0 slc
1000 0 0 sfc
526 3080 827 3380 dbf
300 301 526 3080 dbu
827 1728 dpb
827 3906 dpv
977 3906 dpv
977 1728 dpv
dpf
827 1728 dpb
827 3906 dpv
977 3906 dpv
977 1728 dpv
dpu
0 2178 902 1728 dls
827 3906 977 5184 dbf
1278 150 827 3906 dbu
827 901 977 1728 dbf
827 150 827 901 dbu
1278 2629 1578 2930 dbf
301 300 1278 2629 dbu
1578 1728 dpb
1578 3906 dpv
1729 3906 dpv
1729 1728 dpv
dpf
1578 1728 dpb
1578 3906 dpv
1729 3906 dpv
1729 1728 dpv
dpu
0 2178 1653 1728 dls
1578 3906 1729 5184 dbf
1278 151 1578 3906 dbu
1578 901 1729 1728 dbf
827 151 1578 901 dbu
2029 3080 2330 3380 dbf
300 301 2029 3080 dbu
2330 1728 dpb
2330 3906 dpv
2480 3906 dpv
2480 1728 dpv
dpf
2330 1728 dpb
2330 3906 dpv
2480 3906 dpv
2480 1728 dpv
dpu
0 2178 2405 1728 dls
2330 3906 2480 5184 dbf
1278 150 2330 3906 dbu
2330 901 2480 1728 dbf
827 150 2330 901 dbu
3043 2441 3344 2742 dbf
301 301 3043 2441 dbu
3344 1728 dpb
3344 3906 dpv
3494 3906 dpv
3494 1728 dpv
dpf
3344 1728 dpb
3344 3906 dpv
3494 3906 dpv
3494 1728 dpv
dpu
0 -2178 3419 3906 dls
3344 3906 3494 5184 dbf
1278 150 3344 3906 dbu
3344 901 3494 1728 dbf
827 150 3344 901 dbu
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
0 0 1000 slc
0 0 1000 sfc
451 1089 752 1389 dbf
300 301 451 1089 dbu
451 4094 752 4395 dbf
301 301 451 4094 dbu
526 3080 827 3380 dbf
300 301 526 3080 dbu
526 3080 827 3380 dbf
300 301 526 3080 dbu
1090 4395 dpb
1090 5447 dpv
1315 5447 dpv
1315 4395 dpv
dpf
1090 4395 dpb
1090 5447 dpv
1315 5447 dpv
1315 4395 dpv
dpu
0 -1052 1203 5447 dls
1052 4094 1353 4395 dbf
301 301 1052 4094 dbu
1052 5747 1353 6048 dbf
301 301 1052 5747 dbu
1015 5447 1390 5822 dbf
375 375 1015 5447 dbu
1278 2629 1578 2930 dbf
301 300 1278 2629 dbu
1278 2629 1578 2930 dbf
301 300 1278 2629 dbu
489 1089 dpb
489 525 dpv
1916 525 dpv
1916 751 dpv
714 751 dpv
714 1089 dpv
dpf
489 1089 dpb
489 525 dpv
1916 525 dpv
1916 751 dpv
714 751 dpv
714 1089 dpv
dpu
602 1089 dlt
0 -451 dlv
1314 0 dlv
dle
489 4094 dpb
489 3643 dpv
2067 3643 dpv
2067 4094 dpv
1841 4094 dpv
1841 3869 dpv
714 3869 dpv
714 4094 dpv
dpf
489 4094 dpb
489 3643 dpv
2067 3643 dpv
2067 4094 dpv
1841 4094 dpv
1841 3869 dpv
714 3869 dpv
714 4094 dpv
dpu
602 4094 dlt
0 -338 dlv
1352 0 dlv
0 338 dlv
dle
1804 4094 2104 4395 dbf
301 300 1804 4094 dbu
1954 150 2254 450 dbf
300 300 1954 150 dbu
1954 1089 2254 1389 dbf
300 300 1954 1089 dbu
1916 450 2292 826 dbf
376 376 1916 450 dbu
2029 3080 2330 3380 dbf
300 301 2029 3080 dbu
2029 3080 2330 3380 dbf
300 301 2029 3080 dbu
2217 1389 dpb
2217 1915 dpv
2818 1915 dpv
2818 4094 dpv
2593 4094 dpv
2593 2141 dpv
1992 2141 dpv
1992 1389 dpv
dpf
2217 1389 dpb
2217 1915 dpv
2818 1915 dpv
2818 4094 dpv
2593 4094 dpv
2593 2141 dpv
1992 2141 dpv
1992 1389 dpv
dpu
2104 1389 dlt
0 639 dlv
601 0 dlv
0 2066 dlv
dle
2555 4094 2856 4395 dbf
301 301 2555 4094 dbu
3043 2441 3344 2742 dbf
301 301 3043 2441 dbu
3043 2441 3344 2742 dbf
301 301 3043 2441 dbu
2067 4395 dpb
2067 5184 dpv
3607 5184 dpv
3607 4395 dpv
3832 4395 dpv
3832 5409 dpv
1841 5409 dpv
1841 4395 dpv
dpf
2067 4395 dpb
2067 5184 dpv
3607 5184 dpv
3607 4395 dpv
3832 4395 dpv
3832 5409 dpv
1841 5409 dpv
1841 4395 dpv
dpu
1954 4395 dlt
0 901 dlv
1766 0 dlv
0 -901 dlv
dle
3607 1089 dpb
3607 751 dpv
2292 751 dpv
2292 525 dpv
3832 525 dpv
3832 1089 dpv
dpf
3607 1089 dpb
3607 751 dpv
2292 751 dpv
2292 525 dpv
3832 525 dpv
3832 1089 dpv
dpu
3720 1089 dlt
0 -451 dlv
-1428 0 dlv
dle
3569 4094 3870 4395 dbf
301 301 3569 4094 dbu
3569 1089 3870 1389 dbf
300 301 3569 1089 dbu
2818 1915 4170 2141 dbf
226 1352 2818 1915 dbu
5 fds
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 fde
5 sfp
1000 0 1000 slc
1000 0 1000 sfc
1015 5447 1390 5822 dbf
375 375 1015 5447 dbu
1916 450 2292 826 dbf
376 376 1916 450 dbu
1 0 4020 901 dbf
901 4019 1 0 dbu
1 5447 4321 6348 dbf
901 4320 1 5447 dbu
502 149 149 slc
0 0 0 sfc
526 4169 677 4320 dbs
526 1164 677 1314 dbs
602 3155 752 3305 dbs
1127 5822 1278 5973 dbs
1127 4169 1278 4320 dbs
1353 2704 1503 2855 dbs
1879 4169 2029 4320 dbs
2029 225 2179 375 dbs
2029 1164 2179 1314 dbs
2104 3155 2254 3305 dbs
2630 4169 2780 4320 dbs
3119 2516 3269 2667 dbs
3644 4169 3795 4320 dbs
3644 1164 3795 1314 dbs
2 sfp
200 200 600 slc
1000 0 1000 sfc
1090 5522 1315 5747 dbf
225 225 1090 5522 dbu
1992 525 2217 751 dbf
226 225 1992 525 dbu
1000 1000 1000 slc
1000 1000 1000 sfc
0 -626 738 3581 dls
738 3283 dlt
59 59 dlv
60 30 dlv
89 0 dlv
60 -30 dlv
60 -59 dlv
30 -90 dlv
0 -59 dlv
-30 -90 dlv
-60 -59 dlv
-60 -30 dlv
-89 0 dlv
-60 30 dlv
-59 59 dlv
dle
0 -418 1817 3026 dls
1817 2936 dlt
-60 60 dlv
-59 30 dlv
-90 0 dlv
-59 -30 dlv
-60 -60 dlv
-30 -89 dlv
0 -60 dlv
30 -89 dlv
60 -60 dlv
59 -30 dlv
90 0 dlv
59 30 dlv
60 60 dlv
dle
2583 3349 dlt
-59 60 dlv
-60 30 dlv
-89 0 dlv
-60 -30 dlv
-60 -60 dlv
-29 -89 dlv
0 -60 dlv
29 -89 dlv
60 -60 dlv
60 -29 dlv
89 0 dlv
60 29 dlv
59 60 dlv
dle
1590 705 dlt
0 -477 dlv
-30 -90 dlv
-30 -29 dlv
-59 -30 dlv
-90 0 dlv
-59 30 dlv
dle
1590 615 dlt
-60 60 dlv
-59 30 dlv
-90 0 dlv
-59 -30 dlv
-60 -60 dlv
-30 -89 dlv
0 -60 dlv
30 -89 dlv
60 -60 dlv
59 -29 dlv
90 0 dlv
59 29 dlv
60 60 dlv
dle
0 -417 1829 705 dls
1829 586 dlt
89 89 dlv
60 30 dlv
89 0 dlv
60 -30 dlv
30 -89 dlv
0 -298 dlv
dle
0 -626 2723 914 dls
2723 615 dlt
-60 60 dlv
-59 30 dlv
-90 0 dlv
-59 -30 dlv
-60 -60 dlv
-30 -89 dlv
0 -60 dlv
30 -89 dlv
60 -60 dlv
59 -29 dlv
90 0 dlv
59 29 dlv
60 60 dlv
dle
0 -418 2991 914 dls
2991 347 dlt
-29 -30 dlv
29 -29 dlv
30 29 dlv
-30 30 dlv
dle
1698 6077 dlt
179 -417 dlv
178 417 dlv
dle
0 -626 2562 6286 dls
2562 5987 dlt
-59 60 dlv
-60 30 dlv
-89 0 dlv
-60 -30 dlv
-60 -60 dlv
-29 -89 dlv
0 -60 dlv
29 -89 dlv
60 -60 dlv
60 -29 dlv
89 0 dlv
60 29 dlv
59 60 dlv
dle
0 -626 3129 6286 dls
3129 5987 dlt
-60 60 dlv
-59 30 dlv
-90 0 dlv
-60 -30 dlv
-59 -60 dlv
-30 -89 dlv
0 -60 dlv
30 -89 dlv
59 -60 dlv
60 -29 dlv
90 0 dlv
59 29 dlv
60 60 dlv
dle
0 -418 3397 6286 dls
3397 5719 dlt
-30 -30 dlv
30 -29 dlv
30 29 dlv
-30 30 dlv
dle
0 -626 3583 3017 dls
3583 2719 dlt
-60 60 dlv
-60 30 dlv
-89 0 dlv
-60 -30 dlv
-59 -60 dlv
-30 -89 dlv
0 -60 dlv
30 -89 dlv
59 -60 dlv
60 -30 dlv
89 0 dlv
60 30 dlv
60 60 dlv
dle
179 -417 4179 2274 dls
4537 2274 dlt
-179 -417 dlv
-60 -119 dlv
-59 -60 dlv
-60 -30 dlv
-30 0 dlv
dle
1000 1000 1000 slc
1000 1000 1000 sfc
0 6351 1 -1 dls
4598 0 0 0 dls
1 0 4598 6350 clwin
gfs
%%Trailer
%%EOF
