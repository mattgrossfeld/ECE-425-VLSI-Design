%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
0 1236 6343 3360 clwin
0 1236 6343 3361 clwin
0 1236 6343 3361 clwin
ssls
1000 0 0 slc
1000 0 0 sfc
2477 2918 dlt
16 -55 dlv
16 55 dlv
16 -55 dlv
15 55 dlv
dle
0 -55 2568 2918 dls
2568 2902 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -39 dlv
dle
72 0 2706 2910 dls
72 0 2706 2886 dls
2477 3167 dlt
16 -55 dlv
16 55 dlv
16 -55 dlv
15 55 dlv
dle
0 -83 2568 3167 dls
2568 3155 dlt
8 8 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
8 -8 dlv
4 -12 dlv
0 -7 dlv
-4 -12 dlv
-8 -8 dlv
-8 -4 dlv
-12 0 dlv
-8 4 dlv
-8 8 dlv
dle
72 0 2706 3159 dls
72 0 2706 3136 dls
1000 0 0 slc
1000 0 0 sfc
24 0 1954 2539 dls
0 -125 1966 2539 dls
24 0 1954 2414 dls
2043 2539 dlt
-18 -6 dlv
-12 -18 dlv
-6 -29 dlv
0 -18 dlv
6 -30 dlv
12 -18 dlv
18 -6 dlv
12 0 dlv
18 6 dlv
12 18 dlv
6 30 dlv
0 18 dlv
-6 29 dlv
-12 18 dlv
-18 6 dlv
-12 0 dlv
dle
-84 -125 2091 2539 dls
15 0 3885 2572 dls
0 -83 3893 2572 dls
15 0 3885 2489 dls
3968 2572 dlt
-40 0 dlv
-4 -35 dlv
4 4 dlv
12 4 dlv
12 0 dlv
12 -4 dlv
8 -8 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
4011 2556 dlt
8 4 dlv
12 12 dlv
0 -83 dlv
dle
24 0 2975 2730 dls
0 -125 2987 2730 dls
24 0 2975 2605 dls
3100 2730 dlt
-59 0 dlv
-6 -53 dlv
6 5 dlv
17 6 dlv
18 0 dlv
18 -6 dlv
12 -11 dlv
6 -18 dlv
0 -12 dlv
-6 -18 dlv
-12 -12 dlv
-18 -6 dlv
-18 0 dlv
-17 6 dlv
-6 6 dlv
-6 12 dlv
dle
3153 2700 dlt
0 6 dlv
6 12 dlv
6 6 dlv
12 6 dlv
24 0 dlv
12 -6 dlv
5 -6 dlv
6 -12 dlv
0 -12 dlv
-6 -12 dlv
-11 -17 dlv
-60 -60 dlv
83 0 dlv
dle
0 800 400 slc
0 800 400 sfc
-291 0 1428 2282 dls
0 415 1428 2074 dls
-357 -208 1785 2282 dls
-357 207 1785 2282 dls
1826 2282 41 dcu
257 0 1876 2282 dls
0 332 3462 1950 dls
-257 0 3719 1950 dls
-290 0 3752 2282 dls
0 415 3752 2074 dls
3769 1950 41 dcu
-357 -208 4109 2282 dls
-357 207 4109 2282 dls
357 -208 3810 1950 dls
357 207 3810 1950 dls
0 415 4167 1742 dls
4151 2282 41 dcu
291 0 4167 1950 dls
258 0 4200 2282 dls
0 -332 4458 2282 dls
-332 0 2465 2282 dls
2465 2282 dlt
166 0 dlv
0 -166 dlv
dle
0 166 2631 2282 dls
0 -416 2797 2033 dls
0 249 2797 2697 dls
2797 2614 83 dcu
332 0 2631 2033 dls
332 0 2631 2531 dls
0 166 2963 2282 dls
498 0 2548 2116 dls
498 0 2548 2448 dls
3129 2282 dlt
-166 0 dlv
0 -166 dlv
dle
333 0 3129 2282 dls
0 800 400 slc
0 800 400 sfc
1653 2174 dlt
6 -6 dlv
6 6 dlv
-6 6 dlv
-6 -6 dlv
dle
0 -83 1659 2132 dls
0 -83 1706 2132 dls
1706 2108 dlt
18 18 dlv
12 6 dlv
18 0 dlv
12 -6 dlv
5 -18 dlv
0 -59 dlv
dle
1807 2132 dlt
36 -83 dlv
35 83 dlv
dle
0 -83 3834 2197 dls
3834 2157 dlt
8 8 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
8 -8 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -7 dlv
-8 -4 dlv
-12 0 dlv
-8 4 dlv
-8 7 dlv
dle
3906 2197 dlt
4 -4 dlv
3 4 dlv
-3 4 dlv
-4 -4 dlv
dle
0 -55 3910 2169 dls
3945 2197 dlt
0 -68 dlv
4 -11 dlv
8 -4 dlv
8 0 dlv
dle
28 0 3933 2169 dls
4032 2157 dlt
-8 8 dlv
-8 4 dlv
-12 0 dlv
-8 -4 dlv
-7 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
7 -7 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 7 dlv
dle
4056 2145 dlt
47 0 dlv
0 8 dlv
-4 8 dlv
-4 4 dlv
-8 4 dlv
-11 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -7 dlv
8 -4 dlv
11 0 dlv
8 4 dlv
8 7 dlv
dle
0 -83 4131 2197 dls
0 -83 4163 2197 dls
2889 1883 dlt
0 -101 dlv
6 -18 dlv
12 -5 dlv
12 0 dlv
dle
41 0 2872 1842 dls
65 -83 2949 1842 dls
-65 -83 3014 1842 dls
94 0 3038 1747 dls
3239 1842 dlt
0 -95 dlv
-6 -18 dlv
-6 -6 dlv
-12 -6 dlv
-17 0 dlv
-12 6 dlv
dle
3239 1824 dlt
-12 12 dlv
-12 6 dlv
-17 0 dlv
-12 -6 dlv
-12 -12 dlv
-6 -18 dlv
0 -12 dlv
6 -18 dlv
12 -12 dlv
12 -5 dlv
17 0 dlv
12 5 dlv
12 12 dlv
dle
0 -83 3352 1842 dls
3352 1824 dlt
-12 12 dlv
-12 6 dlv
-18 0 dlv
-11 -6 dlv
-12 -12 dlv
-6 -18 dlv
0 -12 dlv
6 -18 dlv
12 -12 dlv
11 -5 dlv
18 0 dlv
12 5 dlv
12 12 dlv
dle
3405 1883 dlt
0 -101 dlv
6 -18 dlv
12 -5 dlv
12 0 dlv
dle
42 0 3387 1842 dls
3465 1806 dlt
71 0 dlv
0 12 dlv
-6 12 dlv
-6 6 dlv
-12 6 dlv
-18 0 dlv
-12 -6 dlv
-12 -12 dlv
-5 -18 dlv
0 -12 dlv
5 -18 dlv
12 -12 dlv
12 -5 dlv
18 0 dlv
12 5 dlv
12 12 dlv
dle
224 749 1000 slc
224 749 1000 sfc
747 0 390 2282 dls
1328 0 1469 1451 dls
1162 0 1635 3278 dls
0 332 2797 2946 dls
0 166 2797 1451 dls
1494 0 4458 2282 dls
1000 0 0 slc
1000 0 0 sfc
0 -83 200 2323 dls
200 2284 dlt
-8 7 dlv
-8 4 dlv
-12 0 dlv
-8 -4 dlv
-8 -7 dlv
-3 -12 dlv
0 -8 dlv
3 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
1157 1455 dlt
48 0 dlv
0 8 dlv
-4 8 dlv
-4 4 dlv
-8 4 dlv
-12 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -11 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
0 -55 1232 1479 dls
1232 1463 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -39 dlv
dle
1298 3317 dlt
4 -4 dlv
4 4 dlv
-4 4 dlv
-4 -4 dlv
dle
0 -56 1302 3290 dls
1330 3266 dlt
47 0 dlv
0 8 dlv
-4 8 dlv
-4 4 dlv
-8 4 dlv
-11 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
11 0 dlv
8 4 dlv
8 8 dlv
dle
0 -56 1405 3290 dls
1405 3274 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
3 -12 dlv
0 -40 dlv
dle
0 -83 6136 2309 dls
6136 2297 dlt
-8 8 dlv
-8 4 dlv
-12 0 dlv
-7 -4 dlv
-8 -8 dlv
-4 -11 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
7 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
1265 2298 dlt
32 83 dlv
32 -83 dlv
dle
40 0 1277 2326 dls
1888 2381 dlt
32 -39 dlv
0 -44 dlv
dle
-31 -39 1951 2381 dls
0 -83 3571 2406 dls
3571 2367 dlt
-8 8 dlv
-8 3 dlv
-12 0 dlv
-8 -3 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
0 -55 3646 2378 dls
3646 2367 dlt
-8 8 dlv
-8 3 dlv
-12 0 dlv
-8 -3 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
3681 2406 dlt
0 -67 dlv
4 -12 dlv
8 -4 dlv
8 0 dlv
dle
27 0 3670 2378 dls
0 -55 3768 2378 dls
3768 2367 dlt
-8 8 dlv
-7 3 dlv
-12 0 dlv
-8 -3 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
7 4 dlv
8 8 dlv
dle
63 0 3788 2315 dls
0 -83 3879 2406 dls
3927 2378 dlt
-8 -3 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
11 0 dlv
8 4 dlv
8 8 dlv
4 12 dlv
0 8 dlv
-4 12 dlv
-8 8 dlv
-8 3 dlv
-11 0 dlv
dle
0 -83 4069 2404 dls
4069 2365 dlt
-8 8 dlv
-8 3 dlv
-12 0 dlv
-8 -3 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
0 -55 4144 2376 dls
4144 2365 dlt
-8 8 dlv
-8 3 dlv
-12 0 dlv
-8 -3 dlv
-8 -8 dlv
-3 -12 dlv
0 -8 dlv
3 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
4180 2404 dlt
0 -67 dlv
3 -12 dlv
8 -4 dlv
8 0 dlv
dle
27 0 4168 2376 dls
0 -55 4267 2376 dls
4267 2365 dlt
-8 8 dlv
-8 3 dlv
-12 0 dlv
-8 -3 dlv
-8 -8 dlv
-4 -12 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -4 dlv
12 0 dlv
8 4 dlv
8 8 dlv
dle
64 0 4286 2313 dls
0 -83 4377 2404 dls
4377 2361 dlt
12 12 dlv
8 3 dlv
12 0 dlv
8 -3 dlv
4 -12 dlv
0 -40 dlv
dle
4448 2404 dlt
4 -4 dlv
4 4 dlv
-4 4 dlv
-4 -4 dlv
dle
0 -55 4452 2376 dls
2615 1888 dlt
-4 8 dlv
-8 8 dlv
-7 4 dlv
-16 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -8 dlv
-4 -12 dlv
0 -19 dlv
4 -12 dlv
4 -8 dlv
8 -8 dlv
8 -4 dlv
16 0 dlv
7 4 dlv
8 8 dlv
4 8 dlv
0 12 dlv
-19 0 dlv
dle
2643 1825 dlt
0 83 dlv
55 -83 dlv
0 83 dlv
dle
2851 2240 dlt
0 83 dlv
27 0 dlv
12 -4 dlv
8 -8 dlv
4 -8 dlv
4 -12 dlv
0 -19 dlv
-4 -12 dlv
-4 -8 dlv
-8 -8 dlv
-12 -4 dlv
-27 0 dlv
dle
2736 2311 dlt
-8 8 dlv
-12 4 dlv
-16 0 dlv
-12 -4 dlv
-7 -8 dlv
0 -8 dlv
4 -8 dlv
3 -4 dlv
8 -3 dlv
24 -8 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -12 dlv
-8 -8 dlv
-12 -4 dlv
-16 0 dlv
-12 4 dlv
-7 8 dlv
dle
2615 2718 dlt
-4 8 dlv
-8 8 dlv
-7 4 dlv
-16 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -8 dlv
-4 -11 dlv
0 -20 dlv
4 -12 dlv
4 -8 dlv
8 -8 dlv
8 -4 dlv
16 0 dlv
7 4 dlv
8 8 dlv
4 8 dlv
0 12 dlv
-19 0 dlv
dle
2643 2655 dlt
0 83 dlv
36 0 dlv
11 -4 dlv
4 -4 dlv
4 -8 dlv
0 -11 dlv
-4 -8 dlv
-4 -4 dlv
-11 -4 dlv
-36 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
1386 1377 dpb
1386 1526 dpv
1477 1526 dpv
1552 1451 dpv
1477 1377 dpv
dps
5869 2207 dpb
5869 2356 dpv
5961 2356 dpv
6035 2282 dpv
5961 2207 dpv
dps
307 2207 dpb
307 2356 dpv
398 2356 dpv
473 2282 dpv
398 2207 dpv
dps
1104 2248 1170 2315 dbs
2100 2248 2166 2315 dbs
3428 2248 3495 2315 dbs
4425 2248 4491 2315 dbs
2100 2248 2166 2315 dbs
2764 1584 2831 1651 dbs
2764 2913 2831 2979 dbs
3428 2248 3495 2315 dbs
1552 3203 dpb
1552 3353 dpv
1643 3353 dpv
1718 3278 dpv
1643 3203 dpv
dps
0 1236 6343 3364 clwin
gfs
%%Trailer
%%EOF
