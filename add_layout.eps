%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6660 600 pap
%%Page: cds 1
gis
110 0 4488 6658 clwin
110 0 4488 6659 clwin
110 0 4488 6659 clwin
1000 0 0 slc
1000 0 0 sfc
ssls
210 210 715 500 dbu
731 591 dlt
0 28 dlv
11 -28 dlv
11 28 dlv
0 -28 dlv
dle
766 614 dlt
3 1 dlv
4 4 dlv
0 -28 dlv
dle
21 0 783 588 dls
814 591 dlt
0 28 dlv
12 0 dlv
4 -1 dlv
2 -2 dlv
1 -2 dlv
0 -4 dlv
-1 -3 dlv
-2 -1 dlv
-4 -2 dlv
-12 0 dlv
dle
849 619 dlt
-3 -1 dlv
-2 -3 dlv
-2 -3 dlv
-1 -4 dlv
0 -7 dlv
1 -4 dlv
2 -2 dlv
2 -3 dlv
3 -1 dlv
6 0 dlv
2 1 dlv
3 3 dlv
1 2 dlv
2 4 dlv
0 7 dlv
-2 4 dlv
-1 3 dlv
-3 3 dlv
-2 1 dlv
-6 0 dlv
dle
872 619 dlt
0 -28 dlv
17 0 dlv
dle
891 619 dlt
11 -13 dlv
0 -15 dlv
dle
-11 -13 913 619 dls
263 264 1741 2158 dbu
1763 2266 dlt
0 47 dlv
18 -47 dlv
18 47 dlv
0 -47 dlv
dle
1817 2302 dlt
0 2 dlv
3 5 dlv
2 2 dlv
5 2 dlv
9 0 dlv
4 -2 dlv
2 -2 dlv
3 -5 dlv
0 -4 dlv
-3 -5 dlv
-4 -7 dlv
-23 -22 dlv
32 0 dlv
dle
36 0 1856 2261 dls
1908 2266 dlt
0 47 dlv
18 -47 dlv
18 47 dlv
0 -47 dlv
dle
1966 2304 dlt
5 2 dlv
7 7 dlv
0 -47 dlv
dle
210 210 2163 500 dbu
2179 591 dlt
0 28 dlv
11 -28 dlv
10 28 dlv
0 -28 dlv
dle
2214 614 dlt
3 1 dlv
4 4 dlv
0 -28 dlv
dle
22 0 2230 588 dls
2262 591 dlt
0 28 dlv
12 0 dlv
4 -1 dlv
1 -2 dlv
2 -2 dlv
0 -4 dlv
-2 -3 dlv
-1 -1 dlv
-4 -2 dlv
-12 0 dlv
dle
2297 619 dlt
-3 -1 dlv
-3 -3 dlv
-1 -3 dlv
-1 -4 dlv
0 -7 dlv
1 -4 dlv
1 -2 dlv
3 -3 dlv
3 -1 dlv
5 0 dlv
3 1 dlv
3 3 dlv
1 2 dlv
1 4 dlv
0 7 dlv
-1 4 dlv
-1 3 dlv
-3 3 dlv
-3 1 dlv
-5 0 dlv
dle
2320 619 dlt
0 -28 dlv
16 0 dlv
dle
2339 619 dlt
11 -13 dlv
0 -15 dlv
dle
-11 -13 2361 619 dls
211 210 2189 2105 dbu
2205 2196 dlt
0 29 dlv
11 -29 dlv
11 29 dlv
0 -29 dlv
dle
2240 2219 dlt
3 2 dlv
4 4 dlv
0 -29 dlv
dle
21 0 2257 2193 dls
2288 2196 dlt
0 29 dlv
12 0 dlv
4 -2 dlv
1 -1 dlv
2 -3 dlv
0 -4 dlv
-2 -3 dlv
-1 -1 dlv
-4 -1 dlv
-12 0 dlv
dle
2323 2225 dlt
-3 -2 dlv
-2 -2 dlv
-2 -3 dlv
-1 -4 dlv
0 -7 dlv
1 -4 dlv
2 -3 dlv
2 -2 dlv
3 -2 dlv
6 0 dlv
2 2 dlv
3 2 dlv
1 3 dlv
2 4 dlv
0 7 dlv
-2 4 dlv
-1 3 dlv
-3 2 dlv
-2 2 dlv
-6 0 dlv
dle
2346 2225 dlt
0 -29 dlv
17 0 dlv
dle
2365 2225 dlt
11 -14 dlv
0 -15 dlv
dle
-11 -14 2387 2225 dls
264 263 2531 157 dbu
2553 265 dlt
0 48 dlv
18 -48 dlv
18 48 dlv
0 -48 dlv
dle
2607 301 dlt
0 3 dlv
2 4 dlv
3 2 dlv
4 3 dlv
9 0 dlv
5 -3 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-2 -4 dlv
-5 -7 dlv
-22 -23 dlv
31 0 dlv
dle
37 0 2645 261 dls
2697 265 dlt
0 48 dlv
18 -48 dlv
18 48 dlv
0 -48 dlv
dle
2756 304 dlt
5 2 dlv
6 7 dlv
0 -48 dlv
dle
211 210 636 2500 dbu
652 2591 dlt
0 29 dlv
11 -29 dlv
11 29 dlv
0 -29 dlv
dle
687 2614 dlt
3 1 dlv
4 5 dlv
0 -29 dlv
dle
21 0 704 2588 dls
735 2591 dlt
0 29 dlv
12 0 dlv
4 -2 dlv
2 -1 dlv
1 -3 dlv
0 -4 dlv
-1 -3 dlv
-2 -1 dlv
-4 -1 dlv
-12 0 dlv
dle
770 2620 dlt
-2 -2 dlv
-3 -3 dlv
-2 -2 dlv
-1 -4 dlv
0 -7 dlv
1 -4 dlv
2 -3 dlv
3 -3 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
3 3 dlv
1 3 dlv
2 4 dlv
0 7 dlv
-2 4 dlv
-1 2 dlv
-3 3 dlv
-2 2 dlv
-6 0 dlv
dle
793 2620 dlt
0 -29 dlv
17 0 dlv
dle
812 2620 dlt
11 -14 dlv
0 -15 dlv
dle
-11 -14 834 2620 dls
263 264 1004 2579 dbu
1026 2687 dlt
0 47 dlv
18 -47 dlv
18 47 dlv
0 -47 dlv
dle
1081 2723 dlt
0 2 dlv
2 5 dlv
2 2 dlv
5 2 dlv
9 0 dlv
4 -2 dlv
2 -2 dlv
3 -5 dlv
0 -4 dlv
-3 -5 dlv
-4 -7 dlv
-23 -22 dlv
32 0 dlv
dle
36 0 1119 2682 dls
1171 2687 dlt
0 47 dlv
18 -47 dlv
18 47 dlv
0 -47 dlv
dle
1229 2725 dlt
5 2 dlv
7 7 dlv
0 -47 dlv
dle
421 422 925 2500 dbu
0 -116 968 2730 dls
968 2713 dlt
11 11 dlv
11 6 dlv
17 0 dlv
11 -6 dlv
11 -11 dlv
5 -16 dlv
0 -11 dlv
-5 -17 dlv
-11 -11 dlv
-11 -5 dlv
-17 0 dlv
-11 5 dlv
-11 11 dlv
dle
1078 2768 dlt
0 -93 dlv
6 -17 dlv
11 -5 dlv
11 0 dlv
dle
38 0 1062 2730 dls
0 -77 1199 2730 dls
1199 2713 dlt
-11 11 dlv
-11 6 dlv
-16 0 dlv
-11 -6 dlv
-11 -11 dlv
-6 -16 dlv
0 -11 dlv
6 -17 dlv
11 -11 dlv
11 -5 dlv
16 0 dlv
11 5 dlv
11 11 dlv
dle
0 -116 1243 2730 dls
1243 2713 dlt
11 11 dlv
11 6 dlv
16 0 dlv
11 -6 dlv
11 -11 dlv
6 -16 dlv
0 -11 dlv
-6 -17 dlv
-11 -11 dlv
-11 -5 dlv
-16 0 dlv
-11 5 dlv
-11 11 dlv
dle
210 210 1426 2579 dbu
1442 2670 dlt
0 28 dlv
11 -28 dlv
10 28 dlv
0 -28 dlv
dle
1477 2693 dlt
3 1 dlv
4 4 dlv
0 -28 dlv
dle
22 0 1493 2667 dls
1525 2670 dlt
0 28 dlv
12 0 dlv
4 -1 dlv
1 -1 dlv
2 -3 dlv
0 -4 dlv
-2 -3 dlv
-1 -1 dlv
-4 -1 dlv
-12 0 dlv
dle
1560 2698 dlt
-3 -1 dlv
-3 -3 dlv
-1 -2 dlv
-1 -4 dlv
0 -7 dlv
1 -4 dlv
1 -3 dlv
3 -3 dlv
3 -1 dlv
5 0 dlv
3 1 dlv
3 3 dlv
1 3 dlv
1 4 dlv
0 7 dlv
-1 4 dlv
-1 2 dlv
-3 3 dlv
-3 1 dlv
-5 0 dlv
dle
1583 2698 dlt
0 -28 dlv
16 0 dlv
dle
1602 2698 dlt
11 -13 dlv
0 -15 dlv
dle
-11 -13 1624 2698 dls
210 210 2189 2553 dbu
2205 2644 dlt
0 28 dlv
11 -28 dlv
11 28 dlv
0 -28 dlv
dle
2240 2667 dlt
3 1 dlv
4 4 dlv
0 -28 dlv
dle
21 0 2257 2641 dls
2288 2644 dlt
0 28 dlv
12 0 dlv
4 -1 dlv
1 -2 dlv
2 -2 dlv
0 -4 dlv
-2 -3 dlv
-1 -1 dlv
-4 -2 dlv
-12 0 dlv
dle
2323 2672 dlt
-3 -1 dlv
-2 -3 dlv
-2 -3 dlv
-1 -4 dlv
0 -7 dlv
1 -4 dlv
2 -2 dlv
2 -3 dlv
3 -1 dlv
6 0 dlv
2 1 dlv
3 3 dlv
1 2 dlv
2 4 dlv
0 7 dlv
-2 4 dlv
-1 3 dlv
-3 3 dlv
-2 1 dlv
-6 0 dlv
dle
2346 2672 dlt
0 -28 dlv
17 0 dlv
dle
2365 2672 dlt
11 -13 dlv
0 -15 dlv
dle
-11 -13 2387 2672 dls
210 211 2715 2553 dbu
2731 2644 dlt
0 28 dlv
11 -28 dlv
11 28 dlv
0 -28 dlv
dle
2767 2667 dlt
2 1 dlv
5 4 dlv
0 -28 dlv
dle
22 0 2783 2641 dls
2814 2644 dlt
0 28 dlv
12 0 dlv
5 -1 dlv
1 -2 dlv
1 -2 dlv
0 -4 dlv
-1 -3 dlv
-1 -1 dlv
-5 -2 dlv
-12 0 dlv
dle
2850 2672 dlt
-3 -1 dlv
-3 -3 dlv
-1 -3 dlv
-2 -4 dlv
0 -7 dlv
2 -4 dlv
1 -2 dlv
3 -3 dlv
3 -1 dlv
5 0 dlv
3 1 dlv
2 3 dlv
2 2 dlv
1 4 dlv
0 7 dlv
-1 4 dlv
-2 3 dlv
-2 3 dlv
-3 1 dlv
-5 0 dlv
dle
2873 2672 dlt
0 -28 dlv
16 0 dlv
dle
2892 2672 dlt
11 -13 dlv
0 -15 dlv
dle
-10 -13 2913 2672 dls
263 263 3347 2579 dbu
3369 2687 dlt
0 47 dlv
18 -47 dlv
18 47 dlv
0 -47 dlv
dle
3423 2723 dlt
0 2 dlv
2 5 dlv
3 2 dlv
4 2 dlv
9 0 dlv
5 -2 dlv
2 -2 dlv
2 -5 dlv
0 -4 dlv
-2 -5 dlv
-5 -7 dlv
-22 -22 dlv
31 0 dlv
dle
36 0 3461 2682 dls
3513 2687 dlt
0 47 dlv
18 -47 dlv
18 47 dlv
0 -47 dlv
dle
3572 2725 dlt
4 2 dlv
7 7 dlv
0 -47 dlv
dle
421 421 3268 2500 dbu
0 -116 3311 2730 dls
3311 2713 dlt
11 11 dlv
11 6 dlv
16 0 dlv
11 -6 dlv
11 -11 dlv
6 -16 dlv
0 -11 dlv
-6 -17 dlv
-11 -11 dlv
-11 -5 dlv
-16 0 dlv
-11 5 dlv
-11 11 dlv
dle
3421 2768 dlt
0 -93 dlv
5 -17 dlv
11 -5 dlv
11 0 dlv
dle
39 0 3404 2730 dls
0 -77 3542 2730 dls
3542 2713 dlt
-11 11 dlv
-11 6 dlv
-17 0 dlv
-11 -6 dlv
-11 -11 dlv
-5 -16 dlv
0 -11 dlv
5 -17 dlv
11 -11 dlv
11 -5 dlv
17 0 dlv
11 5 dlv
11 11 dlv
dle
0 -116 3585 2730 dls
3585 2713 dlt
11 11 dlv
11 6 dlv
17 0 dlv
11 -6 dlv
11 -11 dlv
5 -16 dlv
0 -11 dlv
-5 -17 dlv
-11 -11 dlv
-11 -5 dlv
-17 0 dlv
-11 5 dlv
-11 11 dlv
dle
1 fds
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 fde
1 sfp
0 800 400 slc
0 800 400 sfc
1373 552 1662 1394 dbf
842 289 1373 552 dbu
2926 500 4189 1394 dbf
894 1263 2926 500 dbu
110 552 1373 1394 dbf
842 1263 110 552 dbu
110 26 741 552 dbf
526 631 110 26 dbu
1662 552 2926 1394 dbf
842 1264 1662 552 dbu
1662 26 2926 552 dbf
526 1264 1662 26 dbu
241 4869 4479 6132 dbf
1263 4238 241 4869 dbu
241 6132 873 6659 dbf
527 632 241 6132 dbu
2 fds
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 fde
2 sfp
0 800 400 slc
0 800 400 sfc
3242 1737 3452 1947 dbf
210 210 3242 1737 dbu
3242 1789 3873 1947 dbf
158 631 3242 1789 dbu
3663 1737 3873 1947 dbf
210 210 3663 1737 dbu
320 184 531 394 dbf
210 211 320 184 dbu
425 1710 636 1921 dbf
211 211 425 1710 dbu
425 1763 1057 1921 dbf
158 632 425 1763 dbu
846 1710 1057 1921 dbf
211 211 846 1710 dbu
1978 1737 2189 1947 dbf
210 211 1978 1737 dbu
1978 1789 2610 1947 dbf
158 632 1978 1789 dbu
2399 1737 2610 1947 dbf
210 211 2399 1737 dbu
2557 184 2768 394 dbf
210 211 2557 184 dbu
452 6290 662 6501 dbf
211 210 452 6290 dbu
557 3053 768 3263 dbf
210 211 557 3053 dbu
1031 3053 1241 3263 dbf
210 210 1031 3053 dbu
557 3053 1715 3211 dbf
158 1158 557 3053 dbu
1504 3053 1715 3263 dbf
210 211 1504 3053 dbu
1978 3053 3136 3369 dbf
316 1158 1978 3053 dbu
3347 3053 3558 3263 dbf
210 211 3347 3053 dbu
3347 3053 3979 3211 dbf
158 632 3347 3053 dbu
3926 3053 4137 3263 dbf
210 211 3926 3053 dbu
1000 502 0 slc
1000 502 0 sfc
3242 868 3873 1079 dbf
211 631 3242 868 dbu
215 2158 425 2368 dbf
210 210 215 2158 dbu
425 868 636 1079 dbf
211 211 425 868 dbu
425 921 1057 1079 dbf
158 632 425 921 dbu
846 868 1057 1079 dbf
211 211 846 868 dbu
1768 2184 1978 2395 dbf
211 210 1768 2184 dbu
2610 868 dpb
2399 868 dpv
2399 921 dpv
2189 921 dpv
2189 868 dpv
1978 868 dpv
1978 1079 dpv
2610 1079 dpv
dpf
2610 868 dpb
2399 868 dpv
2399 921 dpv
2189 921 dpv
2189 868 dpv
1978 868 dpv
1978 1079 dpv
2610 1079 dpv
dpu
557 5185 1715 5816 dbf
631 1158 557 5185 dbu
1978 5185 3136 5816 dbf
631 1158 1978 5185 dbu
3347 5185 4137 5816 dbf
631 790 3347 5185 dbu
0 800 400 slc
0 800 400 sfc
474 843 3136 1605 dbu
422 421 215 78 dbu
474 842 320 1579 dbu
474 842 1873 1605 dbu
422 421 2452 78 dbu
421 422 346 6185 dbu
4268 3500 dpb
1873 3500 dpv
1873 3395 dpv
452 3395 dpv
452 2921 dpv
4268 2921 dpv
dpu
1000 502 0 slc
1000 502 0 sfc
579 843 3136 684 dbu
842 869 925 2079 dbu
421 421 110 2053 dbu
474 842 320 736 dbu
421 422 1662 2079 dbu
579 842 1873 658 dbu
895 3843 425 5053 dbu
3 fds
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 fde
3 sfp
1000 0 0 slc
1000 0 0 sfc
3505 684 3610 1263 dbf
579 105 3505 684 dbu
3505 1605 3610 2105 dbf
500 105 3505 1605 dbu
689 500 794 1210 dbf
710 105 689 500 dbu
689 1631 dpb
689 1079 dpv
794 1079 dpv
794 1631 dpv
dpf
689 1631 dpb
689 1079 dpv
794 1079 dpv
794 1631 dpv
dpu
0 -552 741 1631 dls
689 1631 794 2079 dbf
448 105 689 1631 dbu
636 2079 846 2289 dbf
210 210 636 2079 dbu
2241 658 2347 1237 dbf
579 106 2241 658 dbu
2241 1658 2347 2105 dbf
447 106 2241 1658 dbu
3452 2105 3663 2316 dbf
211 211 3452 2105 dbu
3452 500 3663 710 dbf
210 211 3452 500 dbu
610 4500 820 4711 dbf
211 210 610 4500 dbu
820 3342 dpb
820 5053 dpv
925 5053 dpv
925 3342 dpv
dpf
820 3342 dpb
820 5053 dpv
925 5053 dpv
925 3342 dpv
dpu
0 -1711 873 5053 dls
820 5053 925 5948 dbf
895 105 820 5053 dbu
820 2500 925 3342 dbf
842 105 820 2500 dbu
1136 4158 1347 4369 dbf
211 211 1136 4158 dbu
1347 3342 dpb
1347 5053 dpv
1452 5053 dpv
1452 3342 dpv
dpf
1347 3342 dpb
1347 5053 dpv
1452 5053 dpv
1452 3342 dpv
dpu
0 1711 1399 3342 dls
1347 5053 1452 5948 dbf
895 105 1347 5053 dbu
1347 2500 1452 3342 dbf
842 105 1347 2500 dbu
2031 4500 2241 4711 dbf
211 210 2031 4500 dbu
2241 3500 dpb
2241 5053 dpv
2347 5053 dpv
2347 3500 dpv
dpf
2241 3500 dpb
2241 5053 dpv
2347 5053 dpv
2347 3500 dpv
dpu
0 1553 2294 3500 dls
2241 2553 2347 3500 dbf
947 106 2241 2553 dbu
2241 5053 2347 5948 dbf
895 106 2241 5053 dbu
2557 4158 2768 4369 dbf
211 211 2557 4158 dbu
2768 3500 dpb
2768 5053 dpv
2873 5053 dpv
2873 3500 dpv
dpf
2768 3500 dpb
2768 5053 dpv
2873 5053 dpv
2873 3500 dpv
dpu
0 1553 2821 3500 dls
2768 2553 2873 3500 dbf
947 105 2768 2553 dbu
2768 5053 2873 5948 dbf
895 105 2768 5053 dbu
3400 3790 3610 4000 dbf
210 210 3400 3790 dbu
3610 3342 dpb
3610 5053 dpv
3715 5053 dpv
3715 3342 dpv
dpf
3610 3342 dpb
3610 5053 dpv
3715 5053 dpv
3715 3342 dpv
dpu
0 1711 3663 3342 dls
3610 5053 3715 5948 dbf
895 105 3610 5053 dbu
3610 2921 3715 3342 dbf
421 105 3610 2921 dbu
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
0 0 1000 slc
0 0 1000 sfc
662 2210 dpb
662 2605 dpv
820 2605 dpv
820 2210 dpv
dpf
662 2210 dpb
662 2605 dpv
820 2605 dpv
820 2210 dpv
dpu
0 395 741 2210 dls
636 2500 846 2711 dbf
211 210 636 2500 dbu
1426 1579 1583 1763 dbf
184 157 1426 1579 dbu
1426 2658 dpb
1426 1579 dpv
1926 1579 dpv
1926 1737 dpv
1583 1737 dpv
1583 2658 dpv
dpf
1426 2658 dpb
1426 1579 dpv
1926 1579 dpv
1926 1737 dpv
1583 1737 dpv
1583 2658 dpv
dpu
1504 2658 dlt
0 -1000 dlv
422 0 dlv
dle
925 1237 dpb
1215 1237 dpv
1215 526 dpv
2294 526 dpv
2294 684 dpv
1373 684 dpv
1373 1394 dpv
925 1394 dpv
dpf
925 1237 dpb
1215 1237 dpv
1215 526 dpv
2294 526 dpv
2294 684 dpv
1373 684 dpv
1373 1394 dpv
925 1394 dpv
dpu
925 1316 dlt
369 0 dlv
0 -711 dlv
1000 0 dlv
dle
2215 2263 dpb
2215 2605 dpv
2373 2605 dpv
2373 2263 dpv
dpf
2215 2263 dpb
2215 2605 dpv
2373 2605 dpv
2373 2263 dpv
dpu
0 -342 2294 2605 dls
3294 1052 dpb
2926 1052 dpv
2926 421 dpv
2636 421 dpv
2636 263 dpv
3084 263 dpv
3084 894 dpv
3294 894 dpv
dpf
3294 1052 dpb
2926 1052 dpv
2926 421 dpv
2636 421 dpv
2636 263 dpv
3084 263 dpv
3084 894 dpv
3294 894 dpv
dpu
3294 973 dlt
-289 0 dlv
0 -631 dlv
-369 0 dlv
dle
3400 2737 dpb
3084 2737 dpv
3084 1763 dpv
3373 1763 dpv
3373 1921 dpv
3242 1921 dpv
3242 2579 dpv
3400 2579 dpv
dpf
3400 2737 dpb
3084 2737 dpv
3084 1763 dpv
3373 1763 dpv
3373 1921 dpv
3242 1921 dpv
3242 2579 dpv
3400 2579 dpv
dpu
3400 2658 dlt
-237 0 dlv
0 -816 dlv
210 0 dlv
dle
3242 1737 3452 1947 dbf
210 210 3242 1737 dbu
3242 868 3452 1079 dbf
211 210 3242 868 dbu
3452 2105 3663 2316 dbf
211 211 3452 2105 dbu
3452 500 3663 710 dbf
210 211 3452 500 dbu
2715 1342 dpb
2715 1500 dpv
3768 1500 dpv
3768 1342 dpv
dpf
2715 1342 dpb
2715 1500 dpv
3768 1500 dpv
3768 1342 dpv
dpu
1053 0 2715 1421 dls
3689 973 dpb
3689 1842 dpv
3847 1842 dpv
3847 973 dpv
dpf
3689 973 dpb
3689 1842 dpv
3847 1842 dpv
3847 973 dpv
dpu
0 -869 3768 1842 dls
3689 1342 3847 1500 dbf
158 158 3689 1342 dbu
3663 868 3873 1079 dbf
211 210 3663 868 dbu
3663 1737 3873 1947 dbf
210 210 3663 1737 dbu
4268 4211 4400 4369 dbf
158 132 4268 4211 dbu
425 1763 dpb
215 1763 dpv
215 2131 dpv
373 2131 dpv
373 1921 dpv
425 1921 dpv
dpf
425 1763 dpb
215 1763 dpv
215 2131 dpv
373 2131 dpv
373 1921 dpv
425 1921 dpv
dpu
425 1842 dlt
-131 0 dlv
0 289 dlv
dle
215 2158 425 2368 dbf
210 210 215 2158 dbu
188 2131 452 2395 dbf
264 264 188 2131 dbu
320 184 531 394 dbf
210 211 320 184 dbu
294 157 557 421 dbf
264 263 294 157 dbu
557 1079 dpb
557 184 dpv
425 184 dpv
425 342 dpv
399 342 dpv
399 1079 dpv
dpf
557 1079 dpb
557 184 dpv
425 184 dpv
425 342 dpv
399 342 dpv
399 1079 dpv
dpu
478 1079 dlt
0 -816 dlv
-53 0 dlv
dle
425 868 636 1079 dbf
211 211 425 868 dbu
425 1710 636 1921 dbf
211 211 425 1710 dbu
636 2079 846 2289 dbf
210 210 636 2079 dbu
873 1710 dpb
873 1079 dpv
1031 1079 dpv
1031 1710 dpv
dpf
873 1710 dpb
873 1079 dpv
1031 1079 dpv
1031 1710 dpv
dpu
0 -631 952 1710 dls
873 1316 1031 1473 dbf
157 158 873 1316 dbu
846 868 1057 1079 dbf
211 211 846 868 dbu
846 1710 1057 1921 dbf
211 211 846 1710 dbu
1768 2184 1978 2395 dbf
211 210 1768 2184 dbu
1820 1947 dpb
1820 868 dpv
1978 868 dpv
1978 1947 dpv
dpf
1820 1947 dpb
1820 868 dpv
1978 868 dpv
1978 1947 dpv
dpu
0 -1079 1899 1947 dls
1820 1342 1978 1500 dbf
158 158 1820 1342 dbu
1978 1737 2189 1947 dbf
210 211 1978 1737 dbu
1978 868 2189 1079 dbf
211 211 1978 868 dbu
2163 500 2373 710 dbf
210 210 2163 500 dbu
2189 2105 2399 2316 dbf
211 210 2189 2105 dbu
2399 1737 2610 1947 dbf
210 211 2399 1737 dbu
2399 868 2610 1079 dbf
211 211 2399 868 dbu
2557 184 2768 394 dbf
210 211 2557 184 dbu
2610 1947 dpb
2610 868 dpv
2768 868 dpv
2768 1947 dpv
dpf
2610 1947 dpb
2610 868 dpv
2768 868 dpv
2768 1947 dpv
dpu
0 1079 2689 868 dls
2610 1368 2768 1526 dbf
158 158 2610 1368 dbu
3452 2105 3663 2316 dbf
211 211 3452 2105 dbu
3452 500 3663 710 dbf
210 211 3452 500 dbu
452 6290 662 6501 dbf
211 210 452 6290 dbu
557 3053 768 3263 dbf
210 211 557 3053 dbu
557 5606 768 5816 dbf
210 211 557 5606 dbu
610 4500 820 4711 dbf
211 210 610 4500 dbu
715 5974 dpb
715 6237 dpv
873 6237 dpv
873 5974 dpv
dpf
715 5974 dpb
715 6237 dpv
873 6237 dpv
873 5974 dpv
dpu
0 -263 794 6237 dls
662 6237 925 6501 dbf
264 263 662 6237 dbu
1057 3105 dpb
1057 2632 dpv
1215 2632 dpv
1215 3105 dpv
dpf
1057 3105 dpb
1057 2632 dpv
1215 2632 dpv
1215 3105 dpv
dpu
1136 3105 dlt
0 -394 dlv
79 0 dlv
dle
1031 3053 1241 3263 dbf
210 210 1031 3053 dbu
1136 4158 1347 4369 dbf
211 211 1136 4158 dbu
1531 3579 dpb
583 3579 dpv
583 3263 dpv
741 3263 dpv
741 3421 dpv
1531 3421 dpv
dpf
1531 3579 dpb
583 3579 dpv
583 3263 dpv
741 3263 dpv
741 3421 dpv
1531 3421 dpv
dpu
1531 3500 dlt
-869 0 dlv
0 -237 dlv
dle
1531 3263 dpb
1531 3974 dpv
1689 3974 dpv
1689 3263 dpv
dpf
1531 3263 dpb
1531 3974 dpv
1689 3974 dpv
1689 3263 dpv
dpu
0 711 1610 3263 dls
1504 3053 1715 3263 dbf
210 211 1504 3053 dbu
1504 5185 1715 5395 dbf
210 211 1504 5185 dbu
820 4527 dpb
820 4685 dpv
2031 4685 dpv
2031 4527 dpv
dpf
820 4527 dpb
820 4685 dpv
2031 4685 dpv
2031 4527 dpv
dpu
-1211 0 2031 4606 dls
1978 5606 2189 5816 dbf
210 211 1978 5606 dbu
1978 3053 2189 3263 dbf
210 211 1978 3053 dbu
2031 4500 2241 4711 dbf
211 210 2031 4500 dbu
1347 4184 dpb
1347 4342 dpv
2557 4342 dpv
2557 4184 dpv
dpf
1347 4184 dpb
1347 4342 dpv
2557 4342 dpv
2557 4184 dpv
dpu
1210 0 1347 4263 dls
2505 5185 2715 5395 dbf
210 210 2505 5185 dbu
2557 4158 2768 4369 dbf
211 211 2557 4158 dbu
557 5816 dpb
557 5974 dpv
3136 5974 dpv
3136 5816 dpv
dpf
557 5816 dpb
557 5974 dpv
3136 5974 dpv
3136 5816 dpv
dpu
-2579 0 3136 5895 dls
2926 5606 3136 5816 dbf
210 210 2926 5606 dbu
2926 3053 3136 3263 dbf
210 210 2926 3053 dbu
2715 5185 dpb
2715 5343 dpv
3347 5343 dpv
3347 5185 dpv
dpf
2715 5185 dpb
2715 5343 dpv
3347 5343 dpv
3347 5185 dpv
dpu
632 0 2715 5264 dls
1689 3816 dpb
1689 3974 dpv
3400 3974 dpv
3400 3816 dpv
dpf
1689 3816 dpb
1689 3974 dpv
3400 3974 dpv
3400 3816 dpv
dpu
-1711 0 3400 3895 dls
3057 3079 dpb
3057 3237 dpv
3505 3237 dpv
3505 3079 dpv
dpf
3057 3079 dpb
3057 3237 dpv
3505 3237 dpv
3505 3079 dpv
dpu
448 0 3057 3158 dls
3373 2737 dpb
3373 3237 dpv
3531 3237 dpv
3531 2737 dpv
dpf
3373 2737 dpb
3373 3237 dpv
3531 3237 dpv
3531 2737 dpv
dpu
0 421 3452 2816 dls
3347 5185 3558 5395 dbf
210 211 3347 5185 dbu
3347 3053 3558 3263 dbf
210 211 3347 3053 dbu
1531 5185 dpb
1531 4869 dpv
3426 4869 dpv
3426 4000 dpv
3584 4000 dpv
3584 5027 dpv
1689 5027 dpv
1689 5185 dpv
dpf
1531 5185 dpb
1531 4869 dpv
3426 4869 dpv
3426 4000 dpv
3584 4000 dpv
3584 5027 dpv
1689 5027 dpv
1689 5185 dpv
dpu
1610 5185 dlt
0 -237 dlv
1895 0 dlv
0 -948 dlv
dle
3400 3790 3610 4000 dbf
210 210 3400 3790 dbu
2163 3263 dpb
2163 3421 dpv
4110 3421 dpv
4110 5185 dpv
3952 5185 dpv
3952 3579 dpv
2005 3579 dpv
2005 3263 dpv
dpf
2163 3263 dpb
2163 3421 dpv
4110 3421 dpv
4110 5185 dpv
3952 5185 dpv
3952 3579 dpv
2005 3579 dpv
2005 3263 dpv
dpu
2084 3263 dlt
0 237 dlv
1947 0 dlv
0 1685 dlv
dle
3952 3263 dpb
3952 3421 dpv
4110 3421 dpv
4110 3263 dpv
dpf
3952 3263 dpb
3952 3421 dpv
4110 3421 dpv
4110 3263 dpv
dpu
0 -158 4031 3421 dls
3926 5185 4137 5395 dbf
210 211 3926 5185 dbu
3926 3053 4137 3263 dbf
210 211 3926 3053 dbu
4110 4211 4426 4369 dbf
158 316 4110 4211 dbu
5 fds
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 fde
5 sfp
1000 0 1000 slc
1000 0 1000 sfc
2926 26 4216 500 dbf
474 1290 2926 26 dbu
1373 26 1662 552 dbf
526 289 1373 26 dbu
2926 2079 4479 2500 dbf
421 1553 2926 2079 dbu
3926 2684 4216 2895 dbf
211 290 3926 2684 dbu
110 2079 1662 2921 dbf
842 1552 110 2079 dbu
1241 6211 1610 6501 dbf
290 369 1241 6211 dbu
188 2131 452 2395 dbf
264 264 188 2131 dbu
294 157 557 421 dbf
264 263 294 157 dbu
110 2053 1373 2474 dbf
421 1263 110 2053 dbu
110 26 1373 552 dbf
526 1263 110 26 dbu
1873 6264 2136 6527 dbf
263 263 1873 6264 dbu
1873 131 2136 394 dbf
263 263 1873 131 dbu
1662 2079 2926 2500 dbf
421 1264 1662 2079 dbu
1662 26 2926 552 dbf
526 1264 1662 26 dbu
662 6237 925 6501 dbf
264 263 662 6237 dbu
241 6132 4479 6659 dbf
527 4238 241 6132 dbu
241 2500 4479 2921 dbf
421 4238 241 2500 dbu
6 fds
6 <0808> fdf
6 <0404> fdf
6 <0202> fdf
6 <0101> fdf
6 <8080> fdf
6 <4040> fdf
6 <2020> fdf
6 <1010> fdf
6 <0808> fdf
6 <0404> fdf
6 <0202> fdf
6 <0101> fdf
6 <8080> fdf
6 <4040> fdf
6 <2020> fdf
6 <1010> fdf
6 fde
6 sfp
0 1000 1000 slc
0 1000 1000 sfc
1873 6264 2136 6527 dbf
263 263 1873 6264 dbu
1873 6264 2136 6527 dbf
263 263 1873 6264 dbu
1873 131 2136 394 dbf
263 263 1873 131 dbu
1873 131 2136 394 dbf
263 263 1873 131 dbu
1 fds
1 <0000> fdf
1 <4410> fdf
1 <0000> fdf
1 <0000> fdf
1 <0082> fdf
1 <0000> fdf
1 <0000> fdf
1 <4410> fdf
1 <0000> fdf
1 <0000> fdf
1 <0082> fdf
1 <0000> fdf
1 <0000> fdf
1 <4410> fdf
1 <0000> fdf
1 <0000> fdf
1 fde
1 sfp
1000 1000 800 slc
1000 1000 800 sfc
1952 342 dpb
1952 6369 dpv
2110 6369 dpv
2110 342 dpv
dpf
1952 342 dpb
1952 6369 dpv
2110 6369 dpv
2110 342 dpv
dpu
0 6027 2031 342 dls
1873 6264 2136 6527 dbf
263 263 1873 6264 dbu
1873 131 2136 394 dbf
263 263 1873 131 dbu
502 149 149 slc
0 0 0 sfc
3294 921 3400 1026 dbs
3294 1789 3400 1895 dbs
3715 921 3821 1026 dbs
3715 1789 3821 1895 dbs
267 2210 373 2316 dbs
373 236 478 342 dbs
478 921 583 1026 dbs
478 1763 583 1868 dbs
689 2131 794 2237 dbs
899 921 1004 1026 dbs
899 1763 1004 1868 dbs
1820 2237 1926 2342 dbs
2031 1789 2136 1895 dbs
2031 921 2136 1026 dbs
2452 1789 2557 1895 dbs
2452 921 2557 1026 dbs
2610 236 2715 342 dbs
3505 2158 3610 2263 dbs
3505 552 3610 658 dbs
504 6343 610 6448 dbs
610 3105 715 3211 dbs
610 5658 715 5764 dbs
662 4553 768 4658 dbs
1083 3105 1189 3211 dbs
1189 4211 1294 4316 dbs
1557 3105 1662 3211 dbs
1557 5237 1662 5343 dbs
2031 3105 2136 3211 dbs
2031 5658 2136 5764 dbs
2084 4553 2189 4658 dbs
2557 5237 2663 5343 dbs
2610 4211 2715 4316 dbs
2978 3105 3084 3211 dbs
2978 5658 3084 5764 dbs
3400 5237 3505 5343 dbs
3400 3105 3505 3211 dbs
3452 3842 3558 3948 dbs
3979 5237 4084 5343 dbs
3979 3105 4084 3211 dbs
2 fds
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 fde
2 sfp
200 200 600 slc
1000 0 1000 sfc
241 2184 399 2342 dbf
158 158 241 2184 dbu
346 210 504 368 dbf
158 158 346 210 dbu
715 6290 873 6448 dbf
158 158 715 6290 dbu
224 749 1000 slc
224 749 1000 sfc
1926 6316 2084 6474 dbf
158 158 1926 6316 dbu
1926 184 2084 342 dbf
158 158 1926 184 dbu
1000 902 749 slc
1000 902 749 sfc
1926 6316 2084 6474 dbf
158 158 1926 6316 dbu
1926 184 2084 342 dbf
158 158 1926 184 dbu
1000 1000 1000 slc
1000 1000 1000 sfc
4380 0 109 26 dls
110 0 4489 6660 clwin
gfs
%%Trailer
%%EOF
