%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
0 1394 6350 3205 clwin
0 1394 6350 3205 clwin
0 1394 6350 3205 clwin
1000 0 0 slc
1000 0 0 sfc
ssls
93 93 711 2155 dbu
718 2193 dlt
0 17 dlv
7 -17 dlv
6 17 dlv
0 -17 dlv
dle
738 2206 dlt
0 1 dlv
0 2 dlv
1 0 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -1 dlv
-1 -3 dlv
-8 -8 dlv
11 0 dlv
dle
13 0 751 2192 dls
769 2193 dlt
0 17 dlv
7 -17 dlv
6 17 dlv
0 -17 dlv
dle
790 2207 dlt
2 1 dlv
2 2 dlv
0 -17 dlv
dle
93 93 3098 2155 dbu
3106 2193 dlt
0 17 dlv
7 -17 dlv
6 17 dlv
0 -17 dlv
dle
3125 2206 dlt
0 1 dlv
1 2 dlv
1 0 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 0 dlv
1 -2 dlv
0 -2 dlv
-1 -1 dlv
-2 -3 dlv
-8 -8 dlv
12 0 dlv
dle
13 0 3139 2192 dls
3157 2193 dlt
0 17 dlv
6 -17 dlv
7 17 dlv
0 -17 dlv
dle
3178 2207 dlt
1 1 dlv
3 2 dlv
0 -17 dlv
dle
93 93 4975 2304 dbu
4983 2342 dlt
0 17 dlv
6 -17 dlv
7 17 dlv
0 -17 dlv
dle
5002 2355 dlt
0 1 dlv
1 1 dlv
1 1 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -1 dlv
1 -1 dlv
0 -2 dlv
-1 -2 dlv
-2 -2 dlv
-8 -8 dlv
11 0 dlv
dle
12 0 5016 2340 dls
5034 2342 dlt
0 17 dlv
6 -17 dlv
7 17 dlv
0 -17 dlv
dle
5055 2356 dlt
1 0 dlv
3 3 dlv
0 -17 dlv
dle
93 93 5235 2499 dbu
5243 2537 dlt
0 17 dlv
6 -17 dlv
7 17 dlv
0 -17 dlv
dle
5262 2550 dlt
0 1 dlv
1 1 dlv
1 1 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -1 dlv
1 -1 dlv
0 -2 dlv
-1 -1 dlv
-2 -3 dlv
-8 -8 dlv
11 0 dlv
dle
12 0 5276 2536 dls
5294 2537 dlt
0 17 dlv
6 -17 dlv
7 17 dlv
0 -17 dlv
dle
5315 2551 dlt
1 1 dlv
3 2 dlv
0 -17 dlv
dle
1811 2524 0 1394 dbu
0 -327 188 2463 dls
188 2292 dlt
46 46 dlv
32 16 dlv
46 0 dlv
31 -16 dlv
16 -46 dlv
0 -156 dlv
dle
0 -218 655 2354 dls
655 2307 dlt
-31 31 dlv
-32 16 dlv
-46 0 dlv
-31 -16 dlv
-32 -31 dlv
-15 -47 dlv
0 -31 dlv
15 -46 dlv
32 -32 dlv
31 -15 dlv
46 0 dlv
32 15 dlv
31 32 dlv
dle
0 -327 779 2463 dls
997 2463 dlt
-31 0 dlv
-31 -16 dlv
-16 -46 dlv
0 -265 dlv
dle
109 0 873 2354 dls
1044 2136 dlt
124 327 dlv
125 -327 dlv
dle
155 0 1091 2245 dls
0 -327 1557 2463 dls
1557 2307 dlt
-31 31 dlv
-31 16 dlv
-46 0 dlv
-32 -16 dlv
-31 -31 dlv
-15 -47 dlv
0 -31 dlv
15 -46 dlv
31 -32 dlv
32 -15 dlv
46 0 dlv
31 15 dlv
31 32 dlv
dle
0 -327 1853 2463 dls
1853 2307 dlt
-31 31 dlv
-31 16 dlv
-47 0 dlv
-31 -16 dlv
-31 -31 dlv
-16 -47 dlv
0 -31 dlv
16 -46 dlv
31 -32 dlv
31 -15 dlv
47 0 dlv
31 15 dlv
31 32 dlv
dle
1962 2260 dlt
187 0 dlv
0 32 dlv
-16 31 dlv
-15 15 dlv
-31 16 dlv
-47 0 dlv
-31 -16 dlv
-31 -31 dlv
-16 -47 dlv
0 -31 dlv
16 -46 dlv
31 -32 dlv
31 -15 dlv
47 0 dlv
31 15 dlv
31 32 dlv
dle
0 -218 2258 2354 dls
2258 2260 dlt
16 47 dlv
31 31 dlv
31 16 dlv
46 0 dlv
dle
1811 2525 2387 1394 dbu
0 -327 2575 2463 dls
2575 2292 dlt
47 46 dlv
31 16 dlv
47 0 dlv
31 -16 dlv
16 -46 dlv
0 -156 dlv
dle
0 -218 3042 2354 dls
3042 2307 dlt
-31 31 dlv
-31 16 dlv
-47 0 dlv
-31 -16 dlv
-31 -31 dlv
-15 -47 dlv
0 -31 dlv
15 -46 dlv
31 -32 dlv
31 -15 dlv
47 0 dlv
31 15 dlv
31 32 dlv
dle
0 -327 3167 2463 dls
3385 2463 dlt
-31 0 dlv
-31 -16 dlv
-16 -46 dlv
0 -265 dlv
dle
109 0 3260 2354 dls
3432 2136 dlt
124 327 dlv
125 -327 dlv
dle
156 0 3478 2245 dls
0 -327 3945 2463 dls
3945 2307 dlt
-31 31 dlv
-31 16 dlv
-47 0 dlv
-31 -16 dlv
-31 -31 dlv
-16 -47 dlv
0 -31 dlv
16 -46 dlv
31 -32 dlv
31 -15 dlv
47 0 dlv
31 15 dlv
31 32 dlv
dle
0 -327 4241 2463 dls
4241 2307 dlt
-31 31 dlv
-31 16 dlv
-47 0 dlv
-31 -16 dlv
-31 -31 dlv
-16 -47 dlv
0 -31 dlv
16 -46 dlv
31 -32 dlv
31 -15 dlv
47 0 dlv
31 15 dlv
31 32 dlv
dle
4350 2260 dlt
187 0 dlv
0 32 dlv
-16 31 dlv
-15 15 dlv
-32 16 dlv
-46 0 dlv
-31 -16 dlv
-32 -31 dlv
-15 -47 dlv
0 -31 dlv
15 -46 dlv
32 -32 dlv
31 -15 dlv
46 0 dlv
32 15 dlv
31 32 dlv
dle
0 -218 4646 2354 dls
4646 2260 dlt
15 47 dlv
31 31 dlv
31 16 dlv
47 0 dlv
dle
1273 632 5198 1932 dbu
167 0 5472 2044 dls
5520 2044 dlt
-36 36 dlv
-12 23 dlv
0 36 dlv
12 24 dlv
36 12 dlv
119 0 dlv
dle
167 0 5472 2402 dls
5508 2402 dlt
-24 -24 dlv
-12 -24 dlv
0 -36 dlv
12 -24 dlv
24 -24 dlv
36 -12 dlv
24 0 dlv
35 12 dlv
24 24 dlv
12 24 dlv
0 36 dlv
-12 24 dlv
-24 24 dlv
dle
167 0 5472 2497 dls
5520 2497 dlt
-36 36 dlv
-12 24 dlv
0 36 dlv
12 23 dlv
36 12 dlv
119 0 dlv
dle
250 0 5389 2855 dls
5508 2855 dlt
-24 -24 dlv
-12 -24 dlv
0 -36 dlv
12 -23 dlv
24 -24 dlv
36 -12 dlv
24 0 dlv
35 12 dlv
24 24 dlv
12 23 dlv
0 36 dlv
-12 24 dlv
-24 24 dlv
dle
5448 2950 dlt
-12 0 dlv
-23 12 dlv
-12 12 dlv
-12 24 dlv
0 48 dlv
12 24 dlv
12 12 dlv
23 12 dlv
24 0 dlv
24 -12 dlv
36 -24 dlv
119 -120 dlv
0 168 dlv
dle
1 fds
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 fde
1 sfp
0 800 400 slc
0 800 400 sfc
2244 2415 2504 2759 dbf
344 260 2244 2415 dbu
2 fds
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 fde
2 sfp
0 0 1000 slc
0 0 1000 sfc
51 2100 107 2155 dbf
55 56 51 2100 dbu
60 2285 116 2341 dbf
56 56 60 2285 dbu
2448 2341 dpb
2392 2341 dpv
2392 2360 dpv
2299 2360 dpv
2299 2304 dpv
2337 2304 dpv
2337 2285 dpv
2448 2285 dpv
dpf
2448 2341 dpb
2392 2341 dpv
2392 2360 dpv
2299 2360 dpv
2299 2304 dpv
2337 2304 dpv
2337 2285 dpv
2448 2285 dpv
dpu
2448 2313 dlt
-84 0 dlv
0 19 dlv
-65 0 dlv
dle
2439 2044 2495 2100 dbf
56 56 2439 2044 dbu
4687 2304 dpb
4706 2304 dpv
4706 1932 dpv
4761 1932 dpv
4761 2360 dpv
4687 2360 dpv
dpf
4687 2304 dpb
4706 2304 dpv
4706 1932 dpv
4761 1932 dpv
4761 2360 dpv
4687 2360 dpv
dpu
4687 2332 dlt
47 0 dlv
0 -400 dlv
dle
4706 1839 4761 1932 dbf
93 55 4706 1839 dbu
5514 2434 dpb
5068 2434 dpv
5068 2304 dpv
5124 2304 dpv
5124 2378 dpv
5514 2378 dpv
dpf
5514 2434 dpb
5068 2434 dpv
5068 2304 dpv
5124 2304 dpv
5124 2378 dpv
5514 2378 dpv
dpu
5514 2406 dlt
-418 0 dlv
0 -102 dlv
dle
5793 2471 5876 2527 dbf
56 83 5793 2471 dbu
3 fds
3 <0000> fdf
3 <1111> fdf
3 <0000> fdf
3 <4444> fdf
3 <0000> fdf
3 <1111> fdf
3 <0000> fdf
3 <4444> fdf
3 <0000> fdf
3 <1111> fdf
3 <0000> fdf
3 <4444> fdf
3 <0000> fdf
3 <1111> fdf
3 <0000> fdf
3 <4444> fdf
3 fde
3 sfp
1000 0 1000 slc
1000 0 1000 sfc
5198 2202 dpb
5830 2202 dpv
5830 1394 dpv
116 1394 dpv
116 1979 dpv
748 1979 dpv
748 1691 dpv
2504 1691 dpv
2504 1979 dpv
3136 1979 dpv
3136 1691 dpv
5198 1691 dpv
dpf
5198 2202 dpb
5830 2202 dpv
5830 1394 dpv
116 1394 dpv
116 1979 dpv
748 1979 dpv
748 1691 dpv
2504 1691 dpv
2504 1979 dpv
3136 1979 dpv
3136 1691 dpv
5198 1691 dpv
dpu
3191 2165 dpb
4864 2165 dpv
4864 2313 dpv
4975 2313 dpv
4975 2369 dpv
4808 2369 dpv
4808 2220 dpv
3191 2220 dpv
dpf
3191 2165 dpb
4864 2165 dpv
4864 2313 dpv
4975 2313 dpv
4975 2369 dpv
4808 2369 dpv
4808 2220 dpv
3191 2220 dpv
dpu
3191 2192 dlt
1645 0 dlv
0 149 dlv
139 0 dlv
dle
5235 2573 dpb
3061 2573 dpv
3061 2434 dpv
1881 2434 dpv
1881 2220 dpv
804 2220 dpv
804 2165 dpv
1937 2165 dpv
1937 2378 dpv
3117 2378 dpv
3117 2518 dpv
5235 2518 dpv
dpf
5235 2573 dpb
3061 2573 dpv
3061 2434 dpv
1881 2434 dpv
1881 2220 dpv
804 2220 dpv
804 2165 dpv
1937 2165 dpv
1937 2378 dpv
3117 2378 dpv
3117 2518 dpv
5235 2518 dpv
dpu
5235 2546 dlt
-2146 0 dlv
0 -140 dlv
-1180 0 dlv
0 -214 dlv
-1105 0 dlv
dle
5830 2982 dpb
5830 3205 dpv
116 3205 dpv
116 2759 dpv
748 2759 dpv
748 2982 dpv
2244 2982 dpv
2244 2759 dpv
3136 2759 dpv
3136 2982 dpv
dpf
5830 2982 dpb
5830 3205 dpv
116 3205 dpv
116 2759 dpv
748 2759 dpv
748 2982 dpv
2244 2982 dpv
2244 2759 dpv
3136 2759 dpv
3136 2982 dpv
dpu
0 1394 6350 3206 clwin
gfs
%%Trailer
%%EOF
