%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
0 396 4598 5953 clwin
0 396 4598 5953 clwin
0 396 4598 5954 clwin
1 fds
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 fde
1 sfp
0 800 400 slc
0 800 400 sfc
ssls
2222 5269 2906 5953 dbf
684 684 2222 5269 dbu
0 3901 4588 5269 dbf
1368 4588 0 3901 dbu
2 fds
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 fde
2 sfp
0 800 400 slc
0 800 400 sfc
341 1450 569 1678 dbf
228 228 341 1450 dbu
854 1450 1082 1678 dbf
228 228 854 1450 dbu
341 1450 1595 1621 dbf
171 1254 341 1450 dbu
1367 1450 1595 1678 dbf
228 228 1367 1450 dbu
2450 5497 2678 5725 dbf
228 228 2450 5497 dbu
1880 1450 3134 1792 dbf
342 1254 1880 1450 dbu
3362 1450 3590 1678 dbf
228 228 3362 1450 dbu
3362 1450 4046 1621 dbf
171 684 3362 1450 dbu
3989 1450 4217 1678 dbf
228 228 3989 1450 dbu
1000 502 0 slc
1000 502 0 sfc
2194 652 2422 880 dbf
228 228 2194 652 dbu
341 4243 1595 4927 dbf
684 1254 341 4243 dbu
1880 4243 3134 4927 dbf
684 1254 1880 4243 dbu
3362 4243 4217 4927 dbf
684 855 3362 4243 dbu
0 800 400 slc
0 800 400 sfc
456 456 2336 5383 dbu
4360 1934 dpb
1766 1934 dpv
1766 1820 dpv
227 1820 dpv
227 1307 dpv
4360 1307 dpv
dpu
1000 502 0 slc
1000 502 0 sfc
456 456 2080 538 dbu
969 4161 199 4100 dbu
3 fds
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 fde
3 sfp
1000 0 0 slc
1000 0 0 sfc
398 3160 626 3388 dbf
228 228 398 3160 dbu
626 1763 dpb
626 4100 dpv
740 4100 dpv
740 1763 dpv
dpf
626 1763 dpb
626 4100 dpv
740 4100 dpv
740 1763 dpv
dpu
0 -2337 683 4100 dls
626 4100 740 5069 dbf
969 114 626 4100 dbu
626 1307 740 1763 dbf
456 114 626 1307 dbu
968 2618 1196 2846 dbf
228 228 968 2618 dbu
1196 1763 dpb
1196 4100 dpv
1310 4100 dpv
1310 1763 dpv
dpf
1196 1763 dpb
1196 4100 dpv
1310 4100 dpv
1310 1763 dpv
dpu
0 2337 1253 1763 dls
1196 4100 1310 5069 dbf
969 114 1196 4100 dbu
1196 1307 1310 1763 dbf
456 114 1196 1307 dbu
1937 3160 2165 3388 dbf
228 228 1937 3160 dbu
2165 1934 dpb
2165 4100 dpv
2279 4100 dpv
2279 1934 dpv
dpf
2165 1934 dpb
2165 4100 dpv
2279 4100 dpv
2279 1934 dpv
dpu
0 2166 2222 1934 dls
2165 4100 2279 5069 dbf
969 114 2165 4100 dbu
2165 1307 2279 1934 dbf
627 114 2165 1307 dbu
2507 2618 2735 2846 dbf
228 228 2507 2618 dbu
2735 1934 dpb
2735 4100 dpv
2849 4100 dpv
2849 1934 dpv
dpf
2735 1934 dpb
2735 4100 dpv
2849 4100 dpv
2849 1934 dpv
dpu
0 2166 2792 1934 dls
2735 4100 2849 5069 dbf
969 114 2735 4100 dbu
2735 1307 2849 1934 dbf
627 114 2735 1307 dbu
3419 2248 3647 2476 dbf
228 228 3419 2248 dbu
3647 1763 dpb
3647 4100 dpv
3761 4100 dpv
3761 1763 dpv
dpf
3647 1763 dpb
3647 4100 dpv
3761 4100 dpv
3761 1763 dpv
dpu
0 2337 3704 1763 dls
3647 4100 3761 5069 dbf
969 114 3647 4100 dbu
3647 1307 3761 1763 dbf
456 114 3647 1307 dbu
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
0 0 1000 slc
0 0 1000 sfc
370 4471 dpb
370 5126 dpv
541 5126 dpv
541 4471 dpv
dpf
370 4471 dpb
370 5126 dpv
541 5126 dpv
541 4471 dpv
dpu
0 655 455 4471 dls
341 1450 569 1678 dbf
228 228 341 1450 dbu
341 4243 569 4471 dbf
228 228 341 4243 dbu
398 3160 626 3388 dbf
228 228 398 3160 dbu
883 1279 dpb
883 1450 dpv
1054 1450 dpv
1054 1279 dpv
dpf
883 1279 dpb
883 1450 dpv
1054 1450 dpv
1054 1279 dpv
dpu
0 171 968 1279 dls
854 1450 1082 1678 dbf
228 228 854 1450 dbu
968 2618 1196 2846 dbf
228 228 968 2618 dbu
1396 2020 dpb
370 2020 dpv
370 1678 dpv
541 1678 dpv
541 1849 dpv
1396 1849 dpv
dpf
1396 2020 dpb
370 2020 dpv
370 1678 dpv
541 1678 dpv
541 1849 dpv
1396 1849 dpv
dpu
1396 1934 dlt
-941 0 dlv
0 -256 dlv
dle
1396 1678 dpb
1396 2447 dpv
1567 2447 dpv
1567 1678 dpv
dpf
1396 1678 dpb
1396 2447 dpv
1567 2447 dpv
1567 1678 dpv
dpu
0 769 1481 1678 dls
1367 1450 1595 1678 dbf
228 228 1367 1450 dbu
1367 4243 1595 4471 dbf
228 228 1367 4243 dbu
1937 3388 dpb
1937 3559 dpv
398 3559 dpv
398 3388 dpv
dpf
1937 3388 dpb
1937 3559 dpv
398 3559 dpv
398 3388 dpv
dpu
484 3388 dlt
0 85 dlv
1368 0 dlv
0 -85 dlv
dle
1937 3388 dpb
1766 3388 dpv
1766 3188 dpv
1937 3188 dpv
dpf
1937 3388 dpb
1766 3388 dpv
1766 3188 dpv
1937 3188 dpv
dpu
1937 3274 dlt
-85 0 dlv
0 114 dlv
dle
1909 4471 dpb
1909 5126 dpv
2080 5126 dpv
2080 4471 dpv
dpf
1909 4471 dpb
1909 5126 dpv
2080 5126 dpv
2080 4471 dpv
dpu
0 -655 1994 5126 dls
1880 4243 2108 4471 dbf
228 228 1880 4243 dbu
1880 1450 2108 1678 dbf
228 228 1880 1450 dbu
1937 3160 2165 3388 dbf
228 228 1937 3160 dbu
2393 1108 dpb
2393 1279 dpv
883 1279 dpv
883 1108 dpv
dpf
2393 1108 dpb
2393 1279 dpv
883 1279 dpv
883 1108 dpv
dpu
2308 1108 dlt
0 85 dlv
-1425 0 dlv
dle
2194 652 2422 880 dbf
228 228 2194 652 dbu
2165 823 2450 1108 dbf
285 285 2165 823 dbu
1510 2846 dpb
1510 2647 dpv
2507 2647 dpv
2507 2818 dpv
1681 2818 dpv
1681 3017 dpv
968 3017 dpv
968 2846 dpv
dpf
1510 2846 dpb
1510 2647 dpv
2507 2647 dpv
2507 2818 dpv
1681 2818 dpv
1681 3017 dpv
968 3017 dpv
968 2846 dpv
dpu
1054 2846 dlt
0 86 dlv
541 0 dlv
0 -200 dlv
912 0 dlv
dle
370 5297 dpb
370 5126 dpv
2650 5126 dpv
2650 5297 dpv
dpf
370 5297 dpb
370 5126 dpv
2650 5126 dpv
2650 5297 dpv
dpu
2564 5297 dlt
0 -85 dlv
-2194 0 dlv
dle
2450 5497 2678 5725 dbf
228 228 2450 5497 dbu
2450 4243 2678 4471 dbf
228 228 2450 4243 dbu
2422 5297 2707 5582 dbf
285 285 2422 5297 dbu
2507 2618 2735 2846 dbf
228 228 2507 2618 dbu
1396 4243 dpb
1396 3815 dpv
2137 3815 dpv
2137 3559 dpv
2935 3559 dpv
2935 2447 dpv
3106 2447 dpv
3106 3730 dpv
2308 3730 dpv
2308 3986 dpv
1567 3986 dpv
1567 4243 dpv
dpf
1396 4243 dpb
1396 3815 dpv
2137 3815 dpv
2137 3559 dpv
2935 3559 dpv
2935 2447 dpv
3106 2447 dpv
3106 3730 dpv
2308 3730 dpv
2308 3986 dpv
1567 3986 dpv
1567 4243 dpv
dpu
1481 4243 dlt
0 -342 dlv
741 0 dlv
0 -257 dlv
798 0 dlv
0 -1197 dlv
dle
2650 5126 dpb
2650 5297 dpv
3106 5297 dpv
3106 5126 dpv
dpf
2650 5126 dpb
2650 5297 dpv
3106 5297 dpv
3106 5126 dpv
dpu
456 0 2650 5212 dls
2935 4471 dpb
2935 5126 dpv
3106 5126 dpv
3106 4471 dpv
dpf
2935 4471 dpb
2935 5126 dpv
3106 5126 dpv
3106 4471 dpv
dpu
0 -655 3020 5126 dls
2935 1279 dpb
2935 1450 dpv
3106 1450 dpv
3106 1279 dpv
dpf
2935 1279 dpb
2935 1450 dpv
3106 1450 dpv
3106 1279 dpv
dpu
0 171 3020 1279 dls
2906 4243 3134 4471 dbf
228 228 2906 4243 dbu
2906 1450 3134 1678 dbf
228 228 2906 1450 dbu
1567 2276 dpb
1567 2447 dpv
3419 2447 dpv
3419 2276 dpv
dpf
1567 2276 dpb
1567 2447 dpv
3419 2447 dpv
3419 2276 dpv
dpu
-1852 0 3419 2362 dls
2393 1108 dpb
3562 1108 dpv
3562 1450 dpv
3391 1450 dpv
3391 1279 dpv
2393 1279 dpv
dpf
2393 1108 dpb
3562 1108 dpv
3562 1450 dpv
3391 1450 dpv
3391 1279 dpv
2393 1279 dpv
dpu
2393 1193 dlt
1083 0 dlv
0 257 dlv
dle
2479 4243 dpb
2479 3901 dpv
3562 3901 dpv
3562 4243 dpv
3391 4243 dpv
3391 4072 dpv
2650 4072 dpv
2650 4243 dpv
dpf
2479 4243 dpb
2479 3901 dpv
3562 3901 dpv
3562 4243 dpv
3391 4243 dpv
3391 4072 dpv
2650 4072 dpv
2650 4243 dpv
dpu
2564 4243 dlt
0 -257 dlv
912 0 dlv
0 257 dlv
dle
3362 4243 3590 4471 dbf
228 228 3362 4243 dbu
3362 1450 3590 1678 dbf
228 228 3362 1450 dbu
3419 2248 3647 2476 dbf
228 228 3419 2248 dbu
2080 1678 dpb
2080 1849 dpv
4189 1849 dpv
4189 4243 dpv
4018 4243 dpv
4018 2020 dpv
1909 2020 dpv
1909 1678 dpv
dpf
2080 1678 dpb
2080 1849 dpv
4189 1849 dpv
4189 4243 dpv
4018 4243 dpv
4018 2020 dpv
1909 2020 dpv
1909 1678 dpv
dpu
1994 1678 dlt
0 256 dlv
2109 0 dlv
0 2309 dlv
dle
4018 1678 dpb
4018 1849 dpv
4189 1849 dpv
4189 1678 dpv
dpf
4018 1678 dpb
4018 1849 dpv
4189 1849 dpv
4189 1678 dpv
dpu
0 -171 4103 1849 dls
3989 4243 4217 4471 dbf
228 228 3989 4243 dbu
3989 1450 4217 1678 dbf
228 228 3989 1450 dbu
4189 3188 4531 3359 dbf
171 342 4189 3188 dbu
5 fds
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 fde
5 sfp
1000 0 1000 slc
1000 0 1000 sfc
2165 823 2450 1108 dbf
285 285 2165 823 dbu
2422 5297 2707 5582 dbf
285 285 2422 5297 dbu
0 5269 4588 5953 dbf
684 4588 0 5269 dbu
0 396 4588 1307 dbf
911 4588 0 396 dbu
502 149 149 slc
0 0 0 sfc
398 1507 512 1621 dbs
398 4300 512 4414 dbs
455 3217 569 3331 dbs
911 1507 1025 1621 dbs
1025 2675 1139 2789 dbs
1424 1507 1538 1621 dbs
1424 4300 1538 4414 dbs
1937 1507 2051 1621 dbs
1937 4300 2051 4414 dbs
1994 3217 2108 3331 dbs
2251 709 2365 823 dbs
2507 5554 2621 5668 dbs
2507 4300 2621 4414 dbs
2564 2675 2678 2789 dbs
2963 1507 3077 1621 dbs
2963 4300 3077 4414 dbs
3419 4300 3533 4414 dbs
3419 1507 3533 1621 dbs
3476 2305 3590 2419 dbs
4046 4300 4160 4414 dbs
4046 1507 4160 1621 dbs
2 sfp
200 200 600 slc
1000 0 1000 sfc
2222 880 2393 1051 dbf
171 171 2222 880 dbu
2479 5354 2650 5525 dbf
171 171 2479 5354 dbu
1000 1000 1000 slc
1000 1000 1000 sfc
0 -317 808 3432 dls
808 3364 dlt
-46 45 dlv
-45 23 dlv
-68 0 dlv
-45 -23 dlv
-45 -45 dlv
-23 -68 dlv
0 -45 dlv
23 -68 dlv
45 -45 dlv
45 -23 dlv
68 0 dlv
45 23 dlv
46 45 dlv
dle
0 -475 1129 3141 dls
1129 2915 dlt
45 45 dlv
45 22 dlv
68 0 dlv
45 -22 dlv
46 -45 dlv
22 -68 dlv
0 -45 dlv
-22 -68 dlv
-46 -46 dlv
-45 -22 dlv
-68 0 dlv
-45 22 dlv
-45 46 dlv
dle
1686 5633 dlt
136 -317 dlv
135 317 dlv
dle
0 -475 2342 5791 dls
2342 5565 dlt
-45 45 dlv
-46 23 dlv
-67 0 dlv
-46 -23 dlv
-45 -45 dlv
-23 -68 dlv
0 -45 dlv
23 -68 dlv
45 -45 dlv
46 -23 dlv
67 0 dlv
46 23 dlv
45 45 dlv
dle
0 -475 2772 5791 dls
2772 5565 dlt
-46 45 dlv
-45 23 dlv
-68 0 dlv
-45 -23 dlv
-45 -45 dlv
-23 -68 dlv
0 -45 dlv
23 -68 dlv
45 -45 dlv
45 -23 dlv
68 0 dlv
45 23 dlv
46 45 dlv
dle
0 -317 2975 5791 dls
2975 5361 dlt
-22 -22 dlv
22 -23 dlv
23 23 dlv
-23 22 dlv
dle
2060 874 dlt
0 -362 dlv
-22 -68 dlv
-23 -23 dlv
-45 -22 dlv
-68 0 dlv
-45 22 dlv
dle
2060 806 dlt
-45 45 dlv
-45 23 dlv
-68 0 dlv
-45 -23 dlv
-46 -45 dlv
-22 -68 dlv
0 -45 dlv
22 -68 dlv
46 -45 dlv
45 -23 dlv
68 0 dlv
45 23 dlv
45 45 dlv
dle
0 -317 2241 874 dls
2241 783 dlt
68 68 dlv
45 23 dlv
68 0 dlv
45 -23 dlv
23 -68 dlv
0 -226 dlv
dle
0 -475 2920 1032 dls
2920 806 dlt
-45 45 dlv
-46 23 dlv
-68 0 dlv
-45 -23 dlv
-45 -45 dlv
-23 -68 dlv
0 -45 dlv
23 -68 dlv
45 -45 dlv
45 -23 dlv
68 0 dlv
46 23 dlv
45 45 dlv
dle
0 -317 3123 1032 dls
3123 602 dlt
-22 -22 dlv
22 -23 dlv
23 23 dlv
-23 22 dlv
dle
135 -317 4281 3404 dls
4552 3404 dlt
-136 -317 dlv
-45 -90 dlv
-45 -46 dlv
-45 -22 dlv
-23 0 dlv
dle
1000 1000 1000 slc
1000 1000 1000 sfc
0 5560 0 395 dls
4600 0 -1 396 dls
0 396 4599 5955 clwin
gfs
%%Trailer
%%EOF
